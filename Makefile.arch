TARGETS=bash-linux-static thumb-linux-static thumb-linux-gnueabi thumb-linux-android \
	thumb2-linux-static thumb2-linux-gnueabi thumb2-linux-android \
	x86-linux-static x86-linux-gnueabi \
	x86_64-linux-static x86_64-linux-gnueabi \
	x86-netbsd-static x86-netbsd-dynamic
HOSTS=$(TARGETS)

HOST?=$(MAKE_HOST)
TARGET?=thumb-linux-static

platform_tuple=$($(1)_ARCH)-$($(1)_OS)-$($(1)_ABI)

define platform_vars # (var_prefix)
	ifneq (,$$(findstring x86_64,$(2)))
		$(1)_ARCH?=x86_64
		$(1)_BITS?=64
		$(1)_RUNNER?=qemu-x86_64
	else ifneq (,$$(findstring x86,$(2)))
		$(1)_ARCH?=x86
		$(1)_BITS?=32
		$(1)_RUNNER?=qemu-i386
	else ifneq (,$$(findstring arm,$(2)))
		$(1)_ARCH?=arm
		$(1)_BITS?=32
		$(1)_RUNNER?=qemu-arm
	else ifneq (,$$(findstring thumb2,$(2)))
		$(1)_ARCH?=thumb2
		$(1)_BITS?=32
		$(1)_RUNNER?=qemu-arm
	else ifneq (,$$(findstring thumb,$(2)))
		$(1)_ARCH?=thumb
		$(1)_BITS?=32
		$(1)_RUNNER?=qemu-arm
	else ifneq (,$$(findstring aarch64,$(2)))
		$(1)_ARCH?=aarch64
		$(1)_BITS?=64
		$(1)_RUNNER?=qemu-aarch64
	else ifneq (,$$(findstring bash,$(2)))
		$(1)_ARCH?=bash
		$(1)_BITS?=32
	else
$$(error "Bad arch: $(2)")
	endif

	ifneq (,$$(findstring linux,$(2)))
		$(1)_OS?=linux
	else ifneq (,$$(findstring windows,$(2)))
		$(1)_OS?=windows
	else ifneq (,$$(findstring netbsd,$(2)))
		$(1)_OS?=netbsd
	else ifneq (,$$(findstring dragonfly,$(2)))
		$(1)_OS?=netbsd
	else ifneq (,$$(findstring freebsd,$(2)))
		$(1)_OS?=netbsd
	else ifneq (,$$(findstring openbsd,$(2)))
		$(1)_OS?=netbsd
	else ifneq (,$$(findstring netbsd,$(2)))
		$(1)_OS?=netbsd
	else
$$(error "Bad OS: $(2)")
	endif

	ifneq (,$$(findstring gnu,$(2)))
		$(1)_ABI?=gnueabi
		$(1)_STATIC?=false
	else ifneq (,$$(findstring android,$(2)))
		$(1)_ABI?=android
		$(1)_STATIC?=false
	else ifneq (,$$(findstring static,$(2)))
		$(1)_ABI?=static
		$(1)_STATIC?=true
	else ifneq (,$$(findstring dynamic,$(2)))
		$(1)_ABI?=dynamic
		$(1)_STATIC?=false
	else
$$(info "Bad ABI: $(2)")
		$(1)_ABI?=static
		$(1)_STATIC?=true
	endif
endef

$(eval $(call platform_vars,HOST,$(HOST)))
$(eval $(call platform_vars,TARGET,$(TARGET)))

ifeq ($(HOST_ARCH), $(TARGET_ARCH))
	TARGET_CC?=$(CC)
	TARGET_RUNNER=
else
	ifneq (32,$(TARGET_BITS))
		TARGET_CFLAGS?=-m32
	endif
	ifeq ($(TARGET_ARCH), thumb)
	     TARGET_CC?=arm-$(TARGET_OS)-$(TARGET_ABI)
	     TARGET_CFLAGS+=-Mthumb
	else
		ifeq ($(TARGET_ARCH), thumb2)
		   TARGET_CC?=arm-$(TARGET_OS)-$(TARGET_ABI)
	     	   TARGET_CFLAGS+=-Mthumb
		else
		   TARGET_CC?=$(TARGET)-gcc
		endif
	endif
	#TARGET_RUNNER?=qemu-$(TARGET_ARCH)
endif

TARGET_VALID=true
ifneq ($(TARGET),$(filter $(TARGET),$(TARGETS)))
	TARGET_VALID=false
endif

.PHONY: env targets hosts

hosts:
	@echo $(HOSTS)
targets:
	@echo $(TARGETS)

define tuple_printer
	@echo "  tuple: " $(call platform_tuple,$(1))
	@echo "   arch: " $($(1)_ARCH)
	@echo "     OS: " $($(1)_OS)
	@echo "   bits: " $($(1)_BITS)
	@echo " static: " $($(1)_STATIC)
endef

env:
	@echo "   Host: " $(HOST)
	$(call tuple_printer,HOST)
	@echo
	@echo " Target: " $(TARGET)
	$(call tuple_printer,TARGET)
	@echo
	@echo "Make host: " $(MAKE_HOST)
	@echo Target CC: $(TARGET_CC) $(TARGET_CFLAGS)
	@echo Valid target: $(TARGET_VALID)
	@echo Runner: $(TARGET_RUNNER)
