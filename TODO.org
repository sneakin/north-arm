#+TITLE: North: Bash Bootstrap

* Goals
** Ultimate:
ELF file that only has an offset thread into a dynamically linked symbol table and interpreter.
** Primary:
Build an ELF file that can execute the code to build itself.
** Secondary:
North Runner compatible with the x86 runner that can mmap a file to execute.

* Tasks
** compile loop:
*** relocate calls and pointers but not data literals
*** DONE immediate / compiling words & dictionary
*** DONE compiler lookup
*** DONE compile with different dictionaries
*** compile with linked dictionary for output
*** DONE Base offset for word addresses
** Reader
*** DONE Rewrite from bash to Forth?
*** Reuse reader from North Core? read-byte level.
Call frames, stack & data pointer math
** Writing
*** DONE ddump to binary file
*** DONE initial code / header & footer
**** DONE ELF32 files
**** ELF64 files
**** Blobs for Bacaw
**** EXE files
*** extract strings from data into section
*** symbol table section
** Defining words
*** DONE Compiled words: create & def -> :
*** Compiler words: :
*** DONE Immediates: immediate
** Assemblers
*** Bacaw
*** x86
*** TODO athumb
**** TODO Branching and return in Thumb; to call ops in ops and call threading
**** Thumb Assembler meta words: mov checks arg range
*** TODO aarch32
**** TODO Status register and coprocessor ops
*** aarch64
**** assembler
**** ELF64
** DONE jumps & loops
*** DONE relative jumps
*** DONE returns
*** DONE IF immediate to count offset
** DONE read strings properly in load, using immediates
** DONE load needs to be callable from definitions.
Needs to interpret input when called while not reading additional input.
** DONE Building needs to allow different program inclusions
** Returns
#+BEGIN
def f ( x y z -- a b )
  a b returns 3 2
end

def f ( x y z -- a b )
  [ a b ] return
end

[ x y z ] f
=> [ a b ]

4 1 2 + dup 3 overn f

#+END
** Building
Need to better handle targets and loading their sources. Too much duplication.
Pass sources in as args from Makefile? Every file requires what it needs?
*** Loading the assembler words into a Bash generated bunary vs. catting them in and dumping?
**** Words needed for catting:
Cat in the better compiler.
Cat in just the assembler.

***** Top level
const> var>
load

***** Functions
Creating dictionary entries: make-dict-entry create
dict-entry accessors
compiling-read with immediates: reuse
comments & strings
string appending

Dictionary entries that are and have real pointers.
All their fields need CS added.
Threads too: offset & indirect.
Data stack: relative or absolute?

*** DONE argc/argv
** Separate ops and definitions
** Separate bash specific defs from the general
** DONE Variables
*** Move to own segment
** DONE Flip int-sub args in runner
** Use just 'end' instead of 'end.*'?
** defcol & def can share more code
** Reader return: drop for negative lengths on reads subsequent to failure
** DONE compiling-read with empty defs, defcol with single element
concat-seq down-stack uses
revmap-stack? stack-find?
** 16 bit op codes: needs int32, literal, etc. to be immediates that write proper sized bytes to op sequence.
** DONE make-noname: call a function with predetermined arguments like `equals?` with one argument.
** Dictionary entry code value: has to point to real code?
** Lisp style dictionary: assoc list of functions
** DONE Remove unasked output
** Tail call optimizations
*** Proper colon defs
*** Framed calls
** TODO Reader needs its own token buffer; no need to return last char/status, negative happens next read
** create> should return the entry, does-col should use it
** DONE load: reader needs data slot and finalizer, and a stack of readers
** TODO stage1
*** DONE Hexadecimal numbers for input
*** Load or cat?
load needs file opening and reading with a reader stack.
*** DONE definitions writen to the data stack
*** definitions with code reuse
*** definition definability for macros
*** DONE String concatenation: ++
** TODO Standard wording
*** TODO c" returns a 2 string
*** Returning from colon def vs frame's return
*** return stack words
** map-string good candidate for cons on stack safety.
** word lists / modules
*** `word-list word` where `word-list` is an immediate that looks `word` up in the named word list.
*** import for use in current module
*** brings in name spacing: what word lists to search when compiling
*** in-package & export/public & import interplays
** Lambda / Code blocks & lists: use [ ] to delineate
** TODO To cross compile: need const>, var>, get-word, set-word, IF/ELSE/THEN
** ELF32
*** ELF dynamic linking of imports
*** ELF .o files with symbol table
*** ELF symbol table
** Runner's jumps op offset or byte offset?
** Compile list of words into list of assembly calls.
** North
*** TODO Missing/stubbed words
*** Move to defcol, def, ":" convention.
** Syscalls
*** mmap memory
*** data stack using brk
*** mmap file
**** Zero copy reads with mmap / from strings; no copy if no more data is read when reading a token
**** mmap output and set data stack to write to a file.
*** Catch segfaults & other errors
*** Spawn a thread
*** fork & exec
** Testing
*** Move tests to assert-equals
*** Test DSL
** TODO quit needs to reset dict in case words are on the stack
** TODO remove early uses of R3 to track calls and returns
** DONE Organization
*** bash forth
**** compiler
*** assemblers
*** lib
*** stage1: thumb forth
**** interpreter
**** compiler
**** runner
**** thumb forth + assembler
*** stage2
**** compiler

** code fields need to point at words, not code
** Tension between output offsets and pointers; dhere is an offset or translate when needed?
** null (last dictionary) lets lookup return a null, default object.
** TODO string readers
" returns a pointer & length when bash cross compiles.
" returns just a pointer in interp
Maintaining the length some where is good.
s" c" tmp" d" ; some only make sense when interpreting at top level
Touches words that take pointer or a pointer/length pair.
*** Currently
| fn   | TL storage | def storage | returns               |
| c"   | stack      |             | chars length          |
| d"   | data       | data        | pointer length        |
| s"   | stack      | data        | pointer length        |
| tmp" | buffer     |             | pointer length        |
| "    | ??         | ??          | bash: pointer         |
|      |            |             | cross: pointer length |
|      |            |             | interp: pointer!      |
*** Desired
| fn   | TL storage | def storage | returns               |
| c"   | stack      |             | chars length          |
| d"   | data       | data        | pointer length        |
| s"   | stack      | data        | pointer length        |
| tmp" | buffer     |             | pointer length        |
| "    | stack      | data        | pointer |

** load from strings
** save ELF runtime image
** Make output functions take an fd argument.
** Eliminate needless padding
** map-seq, map-seqn: prefer lengths over terminator at end
** back port compiling-read
** DRY cross compiling code
* Thoughts
** def syntax
*** Current
var>
const>
alias>
defcol => defcolon
def
:

***  General def and lists
Scheme style symbol table

**** Dictionary
***** dict is an assoc list
***** values are function objects
Head points to a Type that has a caller attribute.
Tail points to the definition sequence.

**** Sequences
[ exprs... ] => sequence
'[ exprs... ] => sequence of resolved, but unexecuted, symbols

**** Variables
def name value
def name [ exprs... ]
**** Colon definitions
def name '[ exprs... ]
def name colon[ exprs... ]
**** Framed colon definitions
def name fun[ exprs... ]
def name begin[ exprs... ]
def name fun( args... ) exprs... end

def name fun exprs... end
def name begin exprs... end
def name fun( args... )[ exprs... ]

*** Cross compiling reads
Need to restore state. Globals make this tough, but compiler object with output stack, immediates, and words can handle that.
** Optimizations
*** Constants can be immediates
*** Inlining
*** To assembly call threading
*** repeated call sequences that have no side effects and return the same values each call can set a generated binding.
** dict register -> this pointer
Calls in a definition are indexed from the register.
Dictionary specified at compile time by specifying a type.
