#+TITLE: North: Bash Bootstrap

* Goals
** Ultimate:

ELF file that only has an offset thread into a dynamically linked
symbol table and interpreter.

** DONE Primary:

Build an ELF file that can execute the code to build itself.

** Secondary:

North Runner compatible with the x86 runner that can mmap a file to
execute.

** Thirdly
Get out of the Turing Tar Pit.
Make a useful program like a game.

** Fourthly

A fully self contained binary that can output its own code that can be
used to rebuild.

- minimal features
- full features


* Tasks

** November
*** Rename ~offset32~ to something like ~literal+cs~ or ~cs+int32~? Then ~offset~ is free for relative pointer literals: ~eip + literal~. ~eip+int32~?

*** Cross compiled structures

    - Types need to be output AND available to the compiler.
    - Type and structure accessors need to be output and available too.
    - Field immediates need to be available to the cross compiler and may need variants.
      
**** A ~toplevel~ set of words to enter and exit the interp and cross compile contexts?
     
*** Dictionary list
*** TTY, socket, signal polling & input
*** Loaded / compiled files list; ~require~ and ~include?~
~load-core~ needs less use if it's compiled in. Actually crashes if core is already loaded.
*** Interp command line args
    - files... :: list of files
    - -e :: eval string
    - -i :: always prompt
    - -D var=value :: set ~var~ to ~value~ before any interpreting; may need a type indicator
    - -D \[data|return\]-stack=number :: stack sizes, location
    - -v :: verbosity
    - -d :: debug; may duplicate the above?
    - -I :: add search path
*** ~tty-img[~ breaks github browsing: encode?
*** number-type function to set what numeric type [-+*/%] operate on
    One use is trig functions for float32 and float64.
    Another is using the interpreter as a calculator.


** September!
*** Pi Zero 1:
    Has no thumb2 so no coprocessor, no float.
    Build included ~lib/math/float32.4th~ with constants computed using floats.
    Add ~hardfloat~, ~softfloat~, and ~nofloat~ to the platform string?
    A features list supplied to the builder?
    Runtime detection of features? FPU? Thumb 1 or 2? Division?
    
    ~runner/imports.4th~ crashed a bootstrap to static build. > stage1 checked worked around.
    
*** DONE TTY Buffer with Unicode
    Buffer cells need to have a larger char field.
    Should have an indication and option to the terminal's encoding.
    Internally utf32 will be used. No need to encode for utf8 if the terminal is utf32.
    
*** No way to call foreign function pointers without making a word.

*** Cross compiling
**** Move boot/cross.4th into src/cross/interp.4th? src/cross/words/interp.4th? src/cross/interp/words.4th?
**** Output cell-size: Use ~out-cell-size~ in cross compiling and other ouput words. ~out-op-size~ could replace ~-op-size~ too.
***** Use ~,cell~ instead of ~,uint32~ to make cross words more portable. ~,out-cell~?
**** Thumb and x86 assemblers need to built into the builder.
    Placing each in separate dictionaries could work. defop/endop could load/unload could work for all but macros. Builder adds those words?

*** Have a (super) lite version of the runner and interpreter.
    Only cell sized math.
    No floats.
    Minimal syscalls.
    No debugging aids.
    Barely able to load-core.
    A build option to strip unused words?

*** TTY
**** input layered on top of a reader's buffering and function pointers
**** input w/ nonblocking support: prior state saved and continuable
     Output too? Buffered output: dumped out in the select loop when ready?
**** fully updating TTY code from old North
     No aliases. Normalized vocab.
**** using readeval
**** usable in binaries

*** Binary self verification
**** Hashing
***** SHA
****** TODO sha-224, 512, etc.
****** DONE SHA-256
***** TODO Internally: FFI imports need relocs out of the code segment
**** Signature
***** ECC or RSA?
***** Big integers
***** Key storage
      Standards may require a full ASN.1 stack.

** August
*** big integers
**** int64 file organization
**** parse-int for int64
**** int64 literal words
*** DONE defining immediates in binary
    Three sets of immediates:
      * interpreter: top level, interpretable, used in evaluated defs
      * cross compiling: interpretable, only used when [cross] compiling
      * output: compiled into binary, listed in binary's immediates.
    
*** structs in binary
    Defines constants and immediates needed during compilation, and generates accessors needed in compiled output.
*** More dictionary meta data: files loaded, definition source location
*** process.4th
**** DONE function to start with a provided function
**** DONE execve wrapper to run system commands: needs to build/copy env and an argv array of strings

** July
*** self contained binaries
**** boot/core and friends
***** DONE immediates
***** better dictionary separation by switching modes & dictionaries
**** clock, raycaster
**** eliminate aliases
**** DONE standalone builder w/ files on command line
*** actual compilation to machine code
**** DONE sized sequences for code fields
**** copy code field, may need a trampoline field or every interpreted word needs a copied code sequence
**** define code to translate direct threads
*** Dictionaries
**** Remove dedicated register
     Use data var.
**** Association list
**** Ops with doop code, assembly data fields?
     Call code field that then jumps to data.
**** Reorder ~dict-map~ arguments to make ~fn~ last.
**** Delay writing out until the end of building?
*** error handler, catch and throw

** <=June?
*** TODO struct fields don't resolve right w/ b and b1 fields.
    Fixed?
*** swap tty-cursor-to's arguments to row, column
*** cross-lookup in bash takes one argument, interp's version takes two.
*** DONE cpio file format as arguments
*** float tests
*** uint64
**** TODO byte order differs from stack / argument and poked memory order
     Little endian puts LSB at the lower address. Stack ordering has LSB at the higher address.
     But byte order in code needs to be consistent on big and little endian systems, which may need 64 bit support in the integer reader instead of faking it.
*** DONE core.4th needs a split to allow inclusion in binary

** Sooner than later
*** current-tty and standard-tty that opens /dev/tty for IO
    When TTY output to a pipe is desired?
**** needs writes that take an fd
**** reads need fd too
*** Crashes with ~literal int32 123~
*** s" places the string onto the data stack polluting the binary. Special interp version for defproper?
*** DONE [#A] structures
*** DONE [#A] variables with data on stack or data segment. initialized on load
*** DONE [#B] ELF exports
*** TODO [#A] Build improvement
**** Multiple targets: thumb 1 & 2, a32, a64, x86, bacaw; android, linux, baremetal; static, dynamic
**** DONE Dependencies: only execute/scan for load
*** Local variables
*** North porting
*** [#B] Error handler
*** [#C] Zero copy reading
Would only work when the token does not span reads.
*** Compiling to assembly
*** egl / gles & TTY drawing
Vulkan on Android doesn't report any devices to 32 bit code.
*** bare metal
**** Pi Zero / 2
**** Pi 3
**** M0 / micro:bit
*** Ports
**** x86
**** bacaw
*** quine
The ability to dump the program to source code into a loadable and buildable format.
**** Disasm
***** TODO integrated into dictionary dump
***** DONE Sized sequences for code fields
**** immediates
Find equivalent words to add ~immediate~ and/or ~immediate-as~ after the definition.
**** hexadecimal 0x prefixes
**** DONE cstring needs to not appear before string literals
**** Reconstruction of immediate words
***** IF/ELSE/THEN
***** CASE ENDCASE
**** Non-cell data values
Arrays, strings, lists, (function) pointers
*** DONE [#A] builder binary
**** DONE Needs immediate dictionary writing and overrides.
**** DONE Command line arguments


** Standard Forth

*** Fully standard list of words
*** Comma & period words
Standard Forth uses these for stream output.
Switch to < or > like standard stack ops?
**** byte data
,ins breaks the rule on ~,word~ and ~.word~.
**** asm ops
*** DONE CASE
#+BEGIN_SRC forth
CASE
  N OF ... ENDOF
  else...
ENDCASE
#+END_SRC
*** Loops
#+BEGIN_SRC forth
begin ... condition until
begin ... while condition... repeat
max init do ... loop
leave
return
+loop
#+END_SRC
*** Misc
0sp - zero stack to init
rot a b c -- b c a
-rot a b c -- c a b
pick -> 1 + overn
nip -> swap drop
tuck a b -- b a b

lshift rshift arshift

include file : loads file
include? file : loads file if it's not already loaded
forget file : unload the file's definitions (a word to free and forget?)
anew : called when entering a new file for bookkeeping for forget.
? +!
*** DONE struct
#+BEGIN_SRC forth
struct: name
  type field: name
  ...
#+END_SRC
*** defer
Executable words that can be rebound with IS.
#+BEGIN_SRC forth
defer motd
' hello is motd
motd ( calls hello )
what's motd ( -> ' hello )
#+END_SRC
*** DONE [IF]
[IF] and other bracketed conditions behave like #if in C.
**** TODO Remove brackets on toplevel use.
*** locals
{ arg1 arg0 | local0 -- result }

** String readers have length limit of token-buffer-max. Could/should read more.
** Full cpio archive concatenated onto binary.
*** needs memory decoding instead of file reads
Use the reader.
*** And/or cpio header file offset argument
*** DONE cpio encoder
*** compressed?
** Postpone lookup with and without immediates
** Using ~'~ in a definition should be like ~literal~ or more like ~pointer~?
#BEGIN_SRC
: ' hello literal hey assert-equals
#END_SRC
** Makefile cross compile support
*** Makefile needs TARGET and HOST documented
*** Makefile detection for HOST defaulted to aarch64 forcing use of qemu.
*** Runner needs targeting
** For op specific data: if the word is in R1, can that be used to address the data field for...? perhaps not for init.
** dynamic linking
*** GNU
**** DONE .dynstr section header for the dynamic string table
**** DONE find what's keeping relocations from using actual symbol addresses
**** Android / GNU switch
** TODO abs-int or int-abs?
** runner ops
*** TODO exec -> exec-cs-offset, interp/boot/cross.4th aliases to exec-cs
*** DONE call ops and return to next
*** DONE variables on stack
*** array index interpreter
*** array of words common with x86 to boot strap a full list of words
** Pi Zero
Lacks thumb2 and therefore division and coprocessor ops.
*** DONE Start with software divide
*** TODO Swap to/from HW & SW
*** TODO Detect thumb2 in HWCAPS on start
**** trap SIGILL
*** TODO A32 coprocessor ops
**** Use aarch32 code to make coprocessor calls?
*** DONE Do new branch ops work?
** compile loop:
*** DONE relocate calls and pointers but not data literals
*** DONE immediate / compiling words & dictionary
*** DONE compiler lookup
*** DONE compile with different dictionaries
*** DONE Base offset for word addresses
** Reader
*** DONE Rewrite from bash to Forth?
*** Reuse reader from North Core? read-byte level.
Call frames, stack & data pointer math
*** Split into buffered reader and tokenizer
** Writing
*** DONE ddump to binary file
*** DONE initial code / header & footer
**** DONE ELF32 files
**** ELF64 files
**** Blobs for Bacaw
**** EXE files
*** extract strings from data into section
*** DONE symbol table section
*** DONE Data RO and BSS sections
** Defining words
*** DONE Compiled words: create & def -> :
*** DONE Compiler words: :
*** DONE Immediates: immediate
** Debugger
*** function call tracing
*** breakpoints
*** watch points
*** memory / variable watches
*** execution stepping
*** exception and signal trapping
*** stack printing, back traces
*** resuming execution
** Assemblers
*** TODO Two passes with labels
*** TODO New-lines write instructions; one per line
*** TODO Binary lacks features to compile a bare bones program.
**** Seg faults
**** constants
**** load-core features
*** ISAs
**** Bacaw
**** x86
**** TODO athumb
***** DONE Branching and return in Thumb; to call ops in ops and call threading
***** Thumb Assembler meta words: mov checks arg range
**** TODO aarch32
***** TODO Status register and coprocessor ops
***** TODO More op coverage
**** aarch64
***** assembler
***** ELF64
**** xtensa
** DONE jumps & loops
*** TODO Amounts in op-size instead of bytes.
*** DONE relative jumps
*** DONE returns
*** DONE IF immediate to count offset
** DONE read strings properly in load, using immediates
** DONE load needs to be callable from definitions.
Needs to interpret input when called while not reading additional input.
** DONE Building needs to allow different program inclusions
** DONE Returns that eat frame args and shift return values
Have return1-n now.

#+BEGIN
def f ( x y z -- a b )
  a b returns 3 2
end

def f ( x y z -- a b )
  [ a b ] return
end

[ x y z ] f
=> [ a b ]

4 1 2 + dup 3 overn f

#+END


** Building
Need to better handle targets and loading their sources. Too much duplication.
Pass sources in as args from Makefile? Every file requires what it needs?
*** Loading the assembler words into a Bash generated binary vs. catting them in and dumping?
**** Words needed for catting:
Cat in the better compiler.
Cat in just the assembler.

***** Top level
const> var>
load

***** Functions
Creating dictionary entries: make-dict-entry create
dict-entry accessors
compiling-read with immediates: reuse
comments & strings
string appending

Dictionary entries that are and have real pointers.
All their fields need CS added.
Threads too: offset & indirect.
Data stack: relative or absolute?

*** DONE argc/argv
**** DONE getopt like function
** DONE Separate ops and definitions
** TODO Separate bash specific defs from the general
** DONE Variables
*** DONE Move to own segment
** DONE Flip int-sub args in runner
** Use just 'end' instead of 'end.*'?
** defcol & def can share more code
** Reader return: drop for negative lengths on reads subsequent to failure
** DONE compiling-read with empty defs, defcol with single element
concat-seq down-stack uses
revmap-stack? stack-find?
** 16 bit op codes: needs int32, literal, etc. to be immediates that write proper sized bytes to op sequence.
** DONE make-noname: call a function with predetermined arguments like `equals?` with one argument.
*** TODO Rename to curry?
** TODO [#A] Dictionary entry code value: has to point to real code?
Would be nice to have colon definitions as code words.
** DONE Variable data allocated on init, value outside the dictionary.
** TODO Lisp style dictionary: assoc list of functions
** DONE Remove unasked output
** Tail call optimizations
*** Proper colon defs
*** Framed calls
** TODO Reader needs its own token buffer; no need to return last char/status, negative happens next read
** TODO create> should return the entry, does-col should use it
Bash specifically.
** DONE load: reader needs data slot and finalizer, and a stack of readers
** TODO stage1
*** DONE Hexadecimal numbers for input
*** DONE Load or cat?
load needs file opening and reading with a reader stack.
*** DONE definitions writen to the data stack
*** definitions with code reuse
*** DONE definition definability for macros
*** DONE String concatenation: ++
** TODO Standard wording
*** TODO c" returns a 2 string
*** Returning from colon def vs frame's return
*** return stack words
** map-string good candidate for cons on stack safety.
** Dictionary lookup with word lists / modules
*** `word-list word` where `word-list` is an immediate that looks `word` up in the named word list.
*** import for use in current module
*** brings in name spacing: what word lists to search when compiling
*** in-package & export/public & import interplays
** TODO Lambda / Code blocks & lists: use [ ] to delineate
** DONE To cross compile: need const>, var>, get-word, set-word, IF/ELSE/THEN
** ELF32
*** TODO Exports
*** DONE ELF dynamic linking of imports
**** DONE Proper symbol flags
**** DONE Library loading
**** DONE Function imports
**** TODO Add symbols only once
**** DONE Dynamically linked variable
*** ELF .o files with symbol table
*** DONE ELF symbol table of imports
*** DONE proper DT_HASH
*** TODO DT_GNU_HASH
** Runner's jumps op offset or byte offset?
** Compile list of words into list of assembly calls.
** North
*** TODO Missing/stubbed words
*** Move to defcol, def, ":" convention.
** Syscalls
*** DONE mmap memory
*** data stack using brk
*** mmap file
**** Zero copy reads with mmap / from strings; no copy if no more data is read when reading a token
**** mmap output and set data stack to write to a file.
*** DONE Catch segfaults & other errors
*** DONE Spawn a thread
*** DONE fork & exec
** Testing
*** Move tests to assert-equals
*** Test DSL: group into suites, setup and teardown, run in child process?
** TODO quit needs to reset dict in case words are on the stack
*** DONE Variables stored outside dictionary.
*** TODO Move stack to top-frame and reinit everything.
** TODO remove early uses of R3 to track calls and returns
** DONE Organization
*** bash forth
**** compiler
*** assemblers
*** lib
*** stage1: thumb forth
**** interpreter
**** compiler
**** runner
**** thumb forth + assembler
*** stage2
**** compiler
** code fields need to point at words, not code
** DONE Tension between output offsets and pointers; dhere is an offset or translate when needed?
** null (last dictionary) lets lookup return a null, default object.
** DONE string readers
" returns a pointer & length when bash cross compiles.
" returns just a pointer in interp
Maintaining the length some where is good.
s" c" tmp" d" ; some only make sense when interpreting at top level
Touches words that take pointer or a pointer/length pair.
*** Currently
| fn   | TL storage | def storage | returns               |
| c"   | stack      |             | chars length          |
| d"   | data       | data        | pointer length        |
| s"   | stack      | data        | pointer length        |
| tmp" | buffer     |             | pointer length        |
| "    | ??         | ??          | bash: pointer         |
|      |            |             | cross: pointer length |
|      |            |             | interp: pointer!      |
*** Desired
| fn   | TL storage | def storage | returns               |
| c"   | stack      |             | chars length          |
| d"   | data       | data        | pointer length        |
| s"   | stack      | data        | pointer length        |
| tmp" | buffer     |             | pointer length        |
| "    | stack      | data        | pointer |

** DONE load from strings
** save ELF runtime image
   Write code segment, data segment, and stack to an ELF blob. Each part needs a segment and program headers to load to same memory location. Dynamic linking would move these.
*** Needs .data size
*** Stack will need to be made position independent and reindexed on load.
** Quine: dump loadable source code
*** include textual source in binary? Could provide hints about immediates used.
** generic next that calls a function to get the next word depending on source or flavor
To unify interpretation of tokens and indirect threads.
*** immediates
*** check if literals and pointers are words
** TODO error handling that quits and/or starts a new interpreter loop
** Make output functions take an fd or stream argument.
** TODO Eliminate needless padding
Zero needed at end of definitions for decompile.
[Data] segment needs to be aligned at 4096 bytes.
** map-seq, map-seqn: prefer lengths over terminator at end
** TODO back port compiling-read
** TODO DRY cross compiling code
*** TODO out-off' should be ' but using the compiling-dict; likewise with [']
dry up with comp' immediated as ' to use compiling-dict.
*** TODO op sized jumps instead of bytes
** TODO move defining/*-boot files to interp/boot/defining, or put arch specific files under a cross/${arch}/
** TODO Towards Lisp
*** Dictionary as argument
**** DONE to compiler
**** to interpreter
*** Dictionary list & first class functions
*** TODO Types
*** DONE Structures
*** Sequences
*** Garbage collection
**** Pointers that point down the stack are bad.
     The locals...
**** Needs to collect from a set of roots:
     values, pointers, sequences, offset code, live frames
     Pointers to sequences of unknown size are one problem.
** after loop
*** Exports, symbol table
*** TODO builder executable that's passed files to build
**** immediate list built for executable
**** DONE flags to toggle static/dynamic, linux/android, elf32/64
*** sigill trap to detect cpu ops
** TODO x86
** Interpreted IF & UNLESS in Bash could not be postponed
** DONE Called ops & LR
Calling ops like any other procedure makes subroutine call threading easy.
*** LR only needs to be pushed if an op makes a call.
**** Returns are popping into PC
**** For an op without calls just a mov PC, LR.
*** Ops can get back to next if next sets LR.
*** When does next exit??
Needs an explicit BYE. exit gets out of a thread, restoring eip.
*** TODO Where LR should be saved and restored? Need a foreign interface to call in.
**** Only save LR with an outer-exec? Exit by clearing stack and setting PC. Or exit up all the way.
**** Mixing threading types? Puts responsibility on enter and exit to return to the right procedure caller.
***** Requires defcol to factor in a multiple valued return record. swap-call-frame
EIP, LR
*** Assembling Call threading
**** Ops & Compiled definitions
branch-link
possible jump table
**** Interpreted words
Inline exec
**** Should be the same so runtime changes can happen.

** Numbers
*** Prefixed hexadecimal output: 0xNN
*** DONE Arbitrary base output
*** Floating point input
*** Floating point output
**** overflows integers and fraction needs zero padding
**** exponent: NNeXX
*** Floating point constants: pi, e, +/- infinity, nan, +/- 0
**** DONE 32 bit
**** 64 bit
** Math
*** log2, logn
**** DONE integers
***** optimize by splitting
**** floats
*** exp, pow, sqrt
**** integers
**** floats
**** optimize
     exp has a trick reusing results, powers of two can bit shift
*** trigonometry: sin, cos, tan, asin, acos, atan
**** TODO further test and verification
**** DONE circular
**** DONE hyperbolic
**** float64
*** big integers (> 64 bits)
**** arithmetic
**** logic
**** comparisons
**** writers
**** conversions

* Thoughts
** Cross compiling
Top level interpreter and cross compiling ideally use the same vocabulary.
Need to be able to enter and exit the cross compiling vocabulary.
Likewise with the assemblers.
Constants should appear in both environments.
Compiling code should be able to alter the compiling environment.

*** Vocabulary
**** Immediates
     IF ELSE THEN CASE OF ENDOF ENDCASE s" " ' s[

**** Literalizers
     
**** Dictionary ops
     create create> lookup drop-dict

**** Defining words
     var>
     const>
     defcol
     def
     :
     immediate immediate-as
     string-const>
     symbol>

*** Transitioning
**** Prefixes alone?
Used every where. Nice to be optional.
**** Dictionary of word lists?
Combine multiple sets. Mix and match on a per file basis?
  
**** More dictionary ops: Mark/forget/cut/append?
Drop in primitives for modules.

**** Modules?
**** Saved environments
     Store the dictionaries in a structure.
     Save and switch to them at will.
     Bit like a fork.
     Marks with dict and idict?

** Modules
     Can be mixed together.
     Prefixed
     Essentially a list of word lists.
     Default user to TopLevel.
     Integration with files?
     Lexical scoping
     Still doesn't handle the mixed code segments.
     
module TopLevel
endmodule

module A
  module B
    def sq
      arg0 arg0 * 1 return1-n
    end
  end

  module C
    def sq arg1 arg1 * arg0 arg0 * 2 return2-n end
  end
end

4 A :: B :: sq

A :: B include
5 sq

module D
  A :: B include

  def mag arg1 sq arg0 sq + 2 return1-n end
end

A :: C module E
  arg0 include
  def mag arg1 sq arg0 sq + 2 return1-n end
end

module F
  ' D :: mag import-as> mag-int
end

     
** def syntax
*** Current
var>
const>
alias>
defcol => defcolon
def
:

*** General def and lists
Scheme style symbol table

**** Dictionary
***** dict is an assoc list
***** values are function objects
Head points to a Type that has a caller attribute.
Tail points to the definition sequence.

**** Sequences
[ exprs... ] => sequence
'[ exprs... ] => sequence of resolved, but unexecuted, symbols

**** Variables
def name value
def name s[ exprs... ]
**** Colon definitions
def name [ exprs... ]
def name colon[ exprs... ]
**** Framed colon definitions
def name fun[ exprs... ]
def name begin[ exprs... ]
def name fun( args... ) exprs... end

def name fun exprs... end
def name begin exprs... end
def name fun( args... )[ exprs... ]

def name [ args... ] do exprs... end
def name [ args... ] { exprs... }
*** Cross compiling reads
Need to restore state. Globals make this tough, but compiler object with output stack, immediates, and words can handle that.
** Optimizations
*** Constants can be immediates
*** Inlining
*** To assembly call threading
*** repeated call sequences that have no side effects and return the same values each call can set a generated binding.
*** Arithmetic between constants
*** Division and multiply by powers of two
*** Tail calls
*** function that can call defs and ops w/o pushing return address or creating frames, name it exec?
** dict register -> this pointer
Calls in a definition are indexed from the register.
Dictionary specified at compile time by specifying a type.
** Next words
*** Current
func> tokens+
func: tokens+
*** Possible
Difference in the interpretation of what gets read and returned.

**** Compiling state with lookup and immediates.
func[ tokens... ]
func [ tokens... ]

Reads in a colon definition.

**** less than compiling. With immediates?
func< (types|atoms)+ >
func < (types|atoms)+ >

Needed for creating generic types via generator functions.
Interpretation semantics: at minimum, words looked up, value placed on stack.
'>' completes the read with word values on stack.

**** Other syntaxes
***** Lists
func( tokens+ )
func{ tokens+ }

Immediates?

***** Strings
func" chars*"
func/ chars*/


** Algorithms

   Easy(?) enough to implement algorithms to securely and efficiently interact with the world.

*** Data
**** b-tree
**** sorting
*** Crypto
**** Hashes
***** SHA
**** Symetric ciphers
***** AES
**** Asymetric
***** ECC
***** RSA
*** Compression
**** Inflate
**** LZ4
*** Protocols
**** HTTP(S)
***** <=1.1
***** >=3
**** SSH
*** Formats
**** JSON
**** XML
**** Distribution archive: cpio.gz?
     
* In the source
#+NAME todos
#+BEGIN_SRC shell :results output org
grep --exclude \*~ -Hn -E "todo|fixme" -r ./src | sed -E -e 's/(.+):([0-9]+):(.*)\( +(todo.*|fixme.*) +(.*) +\)/\4 \5 [[file:\1::\2]]/g' -e 's:todo:TODO:g' -e 's:fixme:FIXME:g' | sort | tee >(wc -l)
#+END_SRC

#+RESULTS:
#+begin_src org
./src/ash/core.sh:304:# FIXME goes on too far
./src/bash/builtins.sh:113:# TODO var> needs to store value on stack by making a const> to here.
./src/bash/core.sh:7:# TODO try using a variable to track here. with zeroing out on pop. no quoting truncation. 
./src/cross/dynlibs.4th:72:( TODO )
./src/cross/exports.4th:47:( TODO export for C callers:
./src/demos/tty/raycast.4th:942:    TODO Logic, io, etc?
./src/demos/tty/raycast.4th:945:TODO Split prompt reading and drawing.
./src/demos/tty/raycast.4th:946:TODO Sky needs to be drawn with the verticals. Computed as it's drawn or sampled from an updated buffer.
./src/interp/numbers.4th:34:def parse-int-base ( string index ++ base index ) ( FIXME: drop args {
./src/lib/asm/x86.4th:366:  ( TODO )
./src/lib/callcc.4th:10:( TODO how to switch back to a thread after switching? current thread state needs to be updated somewhere. Store the current state on the thread's stack? Then how to get back? Even with frozen, repeatable threads?)
./src/north/words.4th:164:( FIXME )
./src/tests/lib/asm/test-x86.4th:100:  dhere 0x123B rcx rdx x2 sib rax modrm+x movr break-padding ( FIXME )
./src/tests/lib/asm/test-x86.4th:133:  dhere 0x10 ecx edx x4 sib esp eax modrm+ movm break-padding ( FIXME )
FIXME "boo" == "boot"? Need to check lengths on both. Checking for 0 byte at end works, but not perfect. [[file:./src/interp/strings.4th::5]]
FIXME "literal int32 0" caused problems. [[file:./src/interp/list.4th::31]]
FIXME 0xA00 caused segfault, decompile also stopped short. [[file:./src/tests/lib/math/int64.4th::61]]
FIXME POSTPONE needs immediate lookup, but immediate support in the output is needed. [[file:./src/interp/boot/cross.4th::199]]
FIXME causes an artifact in the rays. may need more precision and/or ditching degrees [[file:./src/demos/tty/raycast.4th::43]]
FIXME could use Lock instead of pointer, but the accessor provides no type cons [[file:./src/lib/threading/barriers/counted.4th::4]]
FIXME crashes when set too small: nothing to render? crashes w/ too big of a world. down to havinh misaligned floor and ceilings. [[file:./src/demos/tty/raycast.4th::344]]
FIXME did/should the last token get eaten? THEN was leftover on an ELSE when the alias was used. [[file:./src/interp/interp.4th::333]]
FIXME does it fail on ops that use R1 to access the entry? [[file:./src/runner/thumb/ops.4th::94]]
FIXME drop the drop [[file:./src/interp/list.4th::25]]
FIXME duplicated [[file:./src/lib/scantool/scantool.4th::138]]
FIXME duplicated in cross/words.4th [[file:./src/interp/boot/cross.4th::45]]
FIXME duplicates include/thumb-asm.4th a bit [[file:./src/cross/arch/thumb.4th::1]]
FIXME empty else clause [?] generates a ~0 jump-rel~ that can be eliminated [[file:./src/lib/case.4th::16]]
FIXME extraneous negates? [[file:./src/lib/math/float32.4th::141]]
FIXME for bash: no poke [[file:./src/lib/list.4th::85]]
FIXME going to r8 and not rax [[file:./src/tests/lib/asm/test-x86.4th::94]]
FIXME how to get cat to notice the closed pipe? [[file:./src/tests/lib/process.4th::105]]
FIXME in-range? from north-words [[file:./src/demos/tty/raycast.4th::863]]
FIXME invert needs a pen's state tracking [[file:./src/tests/lib/tty/screen.4th::18]]
FIXME length one short in base 8 from parsing max int [[file:./src/interp/numbers.4th::32]]
FIXME literal work in both? [[file:./src/cross/defining/proper.4th::34]]
FIXME looks up cross-immediates and not out-immediates. Breaks CASE. [[file:./src/cross/iwords.4th::17]]
FIXME may not have a begin-frame to find. [[file:./src/interp/boot/core.4th::166]]
FIXME maybe inverted [[file:./src/runner/x86/ops.4th::482]]
FIXME nan right? [[file:./src/runner/thumb/vfp-constants.4th::3]]
FIXME needs to be byte exact, adding padding on allot and going beyond here [[file:./src/lib/tty/buffer.4th::75]]
FIXME needs to read fd directly? [[file:./src/north/words.4th::327]]
FIXME one too many [[file:./src/lib/structs/defining.4th::64]]
FIXME one too many [[file:./src/lib/structs/seq-field.4th::9]]
FIXME ops return using LR; originally may have reused frame [[file:./src/north/words.4th::183]]
FIXME perfect spot for a tailcall / continue> [[file:./src/interp/interp.4th::50]]
FIXME postpone needed, or is there a cross POSTPONE? [[file:./src/cross/case.4th::28]]
FIXME postpone needed, or is there a cross POSTPONE? [[file:./src/interp/boot/cross/case.4th::32]]
FIXME reader breaks at multiples of its buffer? [[file:./src/interp/characters.4th::24]]
FIXME rounded up? [[file:./src/runner/tests/float.4th::147]]
FIXME something does not like single byte names [[file:./src/lib/asm/bit-op.4th::31]]
FIXME swap load-thumb-asm? [[file:./src/cross/builder/bash.4th::55]]
FIXME the moon only makes half way around. [[file:./src/demos/tty/raycast.4th::893]]
FIXME this buffer gets made for each load, could reuse for file reads, or get rid of by reading whole files and tokenizing that memory making buffering only needed when reading streams [[file:./src/interp/interp.4th::414]]
FIXME top level IF gets shadowed by core.4th's IF [[file:./src/lib/lib/lz4.4th::8]]
FIXME using this or modrm-mem is wrong especially with a sib [[file:./src/lib/asm/x86.4th::245]]
FIXME when current-frame = 0, top-frame returns?? [[file:./src/lib/callcc.4th::12]]
FIXME word ends up in the binary. [[file:./src/interp/boot/cross.4th::201]]
FIXME? value of 1 makes more sense? [[file:./src/runner/tests/math.4th::37]]
TODO  needs to be variable [[file:./src/interp/boot/core.4th::272]]
TODO +/-1, 0 special cases of N [[file:./src/lib/math/float32.4th::235]]
TODO .tdata? [[file:./src/lib/elf/stub32.4th::257]]
TODO .tdata? [[file:./src/lib/elf/stub64.4th::251]]
TODO 0 and null separation [[file:./src/tests/lib/list.4th::12]]
TODO 0xf3ef right? [[file:./src/lib/asm/thumb/v2.4th::108]]
TODO CS handling needs EIP and dict adjusted. Changing CS would need a copy of the code section. [[file:./src/lib/callcc.4th::6]]
TODO Data segment allocation and copying [[file:./src/lib/callcc.4th::7]]
TODO Data stack allocation [[file:./src/lib/callcc.4th::8]]
TODO Detect byte order of the old [binary] format. [[file:./src/lib/cpio.4th::78]]
TODO Infinite ray is caused by hline and vline. They need to traverse from x0 -> x1 and not min to max [[file:./src/demos/tty/raycast.4th::1]]
TODO POSTPONE needs a like word that uses dict for the source. [[file:./src/north/words.4th::60]]
TODO Sort two element seqs into pairs that use merge-lists for list->seq input? Do away with merge-seqs. [[file:./src/lib/sort/merge-sort.4th::109]]
TODO TODO and FIXME stats [[file:./src/bin/scantool.4th::6]]
TODO TtyBuffer drawing [[file:./src/demos/tty/clock/tty.4th::10]]
TODO Use atomic compare and exchange ops prior to the futex call. [[file:./src/lib/threading/lock.4th::1]]
TODO [e]poll based reactor [[file:./src/lib/process.4th::3]]
TODO \x, \u, proper \0 [[file:./src/north/words.4th::32]]
TODO a flop and bin-flop code word that calls a smaller op in data.code words that assist inlining. [[file:./src/runner/thumb/vfp.4th::3]]
TODO add multiple inheritance to struct: type, offset [[file:./src/lib/structs/defining.4th::104]]
TODO add struct-fields for struct and struct-field [[file:./src/lib/structs/struct.4th::10]]
TODO adjust output dictionary and pointers by out-offset; or make dhere, dpoke, dpeek offset? [[file:./src/interp/boot/cross.4th::1]]
TODO align-data that's origin aware so 4k align is relative to any origin' not abs addresses [[file:./src/cross/builder/run/interp.4th::56]]
TODO an async next-token that can accumulate each call. presently will block until a token is read if it reads a byte, even in raw mode [[file:./src/demos/tty/raycast.4th::1266]]
TODO an extra zero is padded between entries and first data [[file:./src/cross/defining/colon/interp.4th::15]]
TODO another callback to add pre only when the file opens? [[file:./src/lib/scantool/modes/html.4th::146]]
TODO apply offset in reversal, token lists so lookup is done on reversal? immediate lookup during read? [[file:./src/interp/compiler.4th::74]]
TODO apply op-mask [[file:./src/runner/thumb/indexed.4th::7]]
TODO apply op-mask [[file:./src/runner/thumb/ops.4th::137]]
TODO are output immediates placing output words in defs? [[file:./src/interp/boot/cross/iwords.4th::3]]
TODO arg for fd & total number of digits [[file:./src/interp/output/float32.4th::17]]
TODO array reference fields [[file:./src/lib/structs/seq-field.4th::3]]
TODO as a seqn [[file:./src/runner/ffi.4th::54]]
TODO as a seqn [[file:./src/runner/ffi.4th::78]]
TODO asin, acos, atan [[file:./src/lib/math/float32.4th::290]]
TODO assert other stats? [[file:./src/tests/lib/cpio.4th::34]]
TODO at-start [[file:./src/interp/boot/include.4th::30]]
TODO atomic types [[file:./src/lib/structs/writer.4th::75]]
TODO auto writers to data stack [[file:./src/lib/asm/bit-op.4th::6]]
TODO backwards return list [[file:./src/lib/asm/thumb/disasm.4th::331]]
TODO bc & x86 runners move then poke [[file:./src/interp/data-stack.4th::30]]
TODO be much smarter w/ non-frames [[file:./src/runner/frame-tailing.4th::29]]
TODO be non-destructive [[file:./src/lib/digest/sha256.4th::298]]
TODO benchmark / testing execution time and memory use with big O: loop through different sizes and try to match curve to big O equation. chart output? [[file:./src/lib/bm.4th::10]]
TODO benchmark, optimize [[file:./src/lib/math/float32.4th::123]]
TODO better 32 and 64 bit detection at compile time [[file:./src/lib/linux/stat.4th::63]]
TODO better error [[file:./src/north/north.4th::77]] THEN
TODO binary output structures [[file:./src/lib/structs/defining.4th::3]]
TODO bionic and glibc have different return values. [[file:./src/runner/tests/ffi/calls.4th::55]]
TODO bring back IF [[file:./src/interp/interp.4th::270]]
TODO bss segment for data [[file:./src/lib/elf/stub32-dynamic.4th::567]]
TODO byte-string-equals? needs? [[file:./src/lib/io.4th::12]]
TODO cap number digits to buffer size, will require useless divide[s] or divide by radix [[file:./src/interp/output/dec.4th::5]]
TODO capture stderr too. explains the prompts. [[file:./src/tests/lib/process.4th::10]]
TODO changing during compilation of output words may conflict with the execution ops. [[file:./src/cross/constants.4th::3]]
TODO cleanup thread before it exits? [[file:./src/lib/linux/threads.4th::3]]
TODO clipping [[file:./src/lib/tty/context.4th::20]]
TODO cmp r0 before pop [[file:./src/runner/thumb/copiers.4th::38]]
TODO comparisons conditions without 1 or 0 on stack. [[file:./src/runner/thumb/vfp.4th::4]]
TODO constants for fields > 1 [[file:./src/lib/asm/bit-op.4th::4]]
TODO constants need to be vars. single return strings. lists & strings on stack prevent straight arg ordering. [[file:./src/cross/builder/interp.4th::1]]
TODO copy the data [[file:./src/runner/thumb/init.4th::14]]
TODO could do without dict here [[file:./src/runner/thumb/ffi.4th::123]]
TODO could reuse and combine to half iterations [[file:./src/lib/math/float32.4th::223]]
TODO cursor state, scroll region, scrolling, etc. [[file:./src/lib/tty/screen.4th::3]]
TODO decode popr/pushr register bitfield [[file:./src/lib/asm/thumb/disasm.4th::189]]
TODO detect comments; switch to leader, terminator pairs? [[file:./src/interp/interp.4th::272]]
TODO detect format from magic [[file:./src/lib/cpio.4th::46]]
TODO detect if word is aarch32 or thumb [[file:./src/lib/asm/thumb/disasm.4th::473]]
TODO disassembly of a value to forth [[file:./src/lib/asm/bit-op.4th::5]]
TODO do not drop the locals from the stack [[file:./src/runner/frame-tailing.4th::41]]
TODO does int32 get left behind for numbers as [IF] conditions? [[file:./src/interp/interp.4th::271]]
TODO does it work? it was getting offset. [[file:./src/cross/dynlibs.4th::88]]
TODO does-frame [[file:./src/cross/defining/frames/bash.4th::7]]
TODO does-frame [[file:./src/cross/defining/frames/interp.4th::11]]
TODO don't shift, convert to float? [[file:./src/demos/tty/raycast.4th::329]]
TODO don't shift, convert to float? [[file:./src/demos/tty/raycast.4th::359]]
TODO don't this here [[file:./src/demos/tty/raycast.4th::711]]
TODO drop stack values, setup return landing pad; moy not be possible with the bash forth [[file:./src/lib/catch-bash.4th::53]]
TODO drop stack values? [[file:./src/lib/catch.4th::55]]
TODO drop terminator search and use length [[file:./src/cross/defining/frames/interp.4th::17]]
TODO drop terminator search and use length [[file:./src/north/north.4th::120]]
TODO drop the loop counters? [[file:./src/north/tests/dotimes.4th::14]]
TODO drop to debugger before resignaling [[file:./src/interp/signals.4th::105]]
TODO duplicated by include/runner.4th [[file:./src/cross/builder/bash.4th::7]]
TODO dynamic link sections to load libc [[file:./src/tests/elf/bones/with-data.4th::340]]
TODO elf64 [[file:./src/cross/exports.4th::3]]
TODO error [[file:./src/cross/builder/interp.4th::29]]
TODO error [[file:./src/interp/interp.4th::276]] return0 THEN
TODO error [[file:./src/lib/asm/x86.4th::301]]
TODO error [[file:./src/lib/asm/x86.4th::357]]
TODO error [[file:./src/lib/math/32/int64.4th::253]] 0 set-arg0 0LL set-arg1 set-arg2 return0 THEN
TODO error [[file:./src/lib/module.4th::49]] not-found 0 set-arg0 THEN
TODO error [[file:./src/lib/process.4th::101]]
TODO error [[file:./src/lib/structs/defining.4th::29]]
TODO error [[file:./src/lib/structs/struct-field.4th::62]] s" No field" write-line/2
TODO error [[file:./src/north/north.4th::84]]
TODO error [[file:./src/north/north.4th::93]]
TODO error [[file:./src/north/north.4th::97]]
TODO error handling? supervision that'll restart? [[file:./src/lib/threading/worker.4th::9]]
TODO error if argument is not a struct [[file:./src/lib/structs/struct-field.4th::56]]
TODO error or big math [[file:./src/runner/math.4th::61]] 0 2 return1-n THEN
TODO escaping [[file:./src/interp/decompiler.4th::15]] dquote write-byte
TODO exported symbols from dictionary [[file:./src/lib/elf/stub32-dynamic.4th::585]]
TODO forked threads need a return that calls switch thread instead ofmplacing the thread in the return address slot ; top-frame in forked threads needs to work too; getting towards a scheduler's routine. setjmp? [[file:./src/lib/callcc.4th::9]]
TODO fpscr not setting [[file:./src/runner/thumb/vfp.4th::50]]
TODO fractional exponents, exp can use fractional exponents: x^y = e^[ln[x]*y];  x^[1/n] = e^[ln[x]/n] [[file:./src/lib/math/float32.4th::236]]
TODO fractional x,y for raycaster: pass line state to callback [[file:./src/lib/geometry/lines.4th::2]]
TODO freeing the catcher [[file:./src/lib/catch.4th::57]]
TODO full continuations would need to setup / copy the return stack. Mainly due to functions that expect full control of their local stack and/or drop their locals [on return]. [[file:./src/lib/callcc.4th::5]]
TODO functions need a C ABI wrapper [[file:./src/cross/exports.4th::1]]
TODO get real size [[file:./src/lib/linux/threads.4th::101]]
TODO get rid of the terminator [[file:./src/cross/defining/colon/interp.4th::26]]
TODO handle overflow; base prefixes: 0x, 2#101; negatives [[file:./src/interp/numbers.4th::19]]
TODO have set-cell return clipping status to pass along for more? [[file:./src/lib/tty/buffer.4th::153]]
TODO highlight words; seqs with sizes, typed structs, color coding, unreachable/reachable. [[file:./src/interp/boot/debug/fancy-stack.4th::3]]
TODO how to set both the code and data fields? [[file:./src/cross/dynlibs.4th::118]]
TODO howto keep Thread's SP in sync with the running thread? [[file:./src/lib/linux/threads.4th::6]]
TODO html css cmd line arguments [[file:./src/bin/scantool.4th::8]]
TODO immediates get shifted? [[file:./src/lib/asm/thumb/arm-translated.4th::53]]
TODO immediates get shifted? [[file:./src/lib/asm/thumb/v1.4th::60]]
TODO import-var> or extern> [[file:./src/runner/libc.4th::9]]
TODO imports.4th interfers with C interop. [[file:./src/include/interp.4th::48]]
TODO imports.4th interfers with C interop. [[file:./src/include/runner.4th::102]]
TODO in-range? should drop args; and to ignore arg order [[file:./src/north/north.4th::81]]
TODO include zero? [[file:./src/lib/math/float32.4th::104]]
TODO inherited fields [[file:./src/lib/structs/writer.4th::76]]
TODO init builder-target-bits and endian by target and option [[file:./src/bin/builder.4th::69]]
TODO initializers for structs and each field [[file:./src/lib/structs/defining.4th::77]]
TODO inplace qsort [[file:./src/lib/sort/merge-sort.4th::110]]
TODO interp gets a reader argument, load uses a new reader and interp loop [[file:./src/interp/interp.4th::90]]
TODO interp powered [[file:./src/bin/scantool.4th::11]]
TODO less work doing nothing or calculating this log? [[file:./src/lib/math/32/int32.4th::39]]
TODO let timeout expire? [[file:./src/tests/lib/threading/barriers/bit-mask.4th::38]]
TODO look for fields in supers [[file:./src/lib/structs/struct-field.4th::57]]
TODO lost the ability to have aarch32 ops w/ the size changes [[file:./src/cross/defining/op.4th::3]]
TODO make this the cs word w/o register? [[file:./src/runner/x86/init.4th::9]]
TODO map-fn w/ stepper [[file:./src/lib/math/float32.4th::378]]
TODO map-range [[file:./src/demos/tty/raycast.4th::366]]
TODO map-seq; loading and storing from files; illusion of interpretation [[file:./src/runner/indexed_transpiler.4th::1]]
TODO may not be needed on all platforms [[file:./src/lib/linux/epoll.4th::24]]
TODO mem width & height & explicit pitch [[file:./src/lib/tty/buffer.4th::18]]
TODO merge with bash.4th. shares a lot of code with a few interop aliases. [[file:./src/cross/output/data-vars/interp.4th::1]]
TODO merge-sort sequences [[file:./src/lib/sort/merge-sort.4th::3]]
TODO mmap errors have a range [[file:./src/lib/linux/mmap.4th::35]]
TODO more primitive: current-frame here set-current-frame [[file:./src/runner/thumb/frames.4th::6]]
TODO more primitive: current-frame parent-frame set-current-frame [[file:./src/runner/thumb/frames.4th::16]]
TODO more? [[file:./src/lib/linux/termios.4th::17]]
TODO move eip, frame, rstack, .data section into continuation [[file:./src/lib/catch.4th::8]]
TODO move the following definitions some place better [[file:./src/cross/output/data-vars/bash.4th::1]]
TODO multipliers / shifts [[file:./src/lib/asm/bit-op.4th::3]]
TODO names could use mangling of '-' [[file:./src/cross/exports.4th::2]]
TODO necessary? bash loadable... [[file:./src/interp/boot/core.4th::20]]
TODO need a way to xfer vectors tofrom banks, bank 0 is scalar [[file:./src/runner/thumb/vfp.4th::46]]
TODO need ffi-callback with number of returns [[file:./src/runner/tests/ffi/callbacks.4th::26]]
TODO needs ,uint32 after op codes. [[file:./src/interp/decompiler.4th::138]]
TODO needs a destination and dictionary args to be useful when building [[file:./src/interp/boot/vars.4th::57]]
TODO needs imports for words, variables, and functions that follow our op abi [[file:./src/tests/elf/export-importing.4th::4]]
TODO needs libc to init [[file:./src/interp/imports/android.4th::8]]
TODO needs shifting of offset? [[file:./src/lib/asm/thumb/v1.4th::194]]
TODO needs to be adapted for interp [[file:./src/cross/defining/frames/bash.4th::8]]
TODO needs to be adapted for interp [[file:./src/cross/defining/frames/interp.4th::12]]
TODO needs to make the context [[file:./src/demos/tty/clock/buffer.4th::47]]
TODO needs to reindex [[file:./src/lib/callcc.4th::216]]
TODO needs to return to endtry [[file:./src/lib/catch-bash.4th::61]]
TODO nested comments [[file:./src/interp/interp.4th::159]]
TODO null terminate in function? [[file:./src/interp/tests/int-to-string.4th::14]]
TODO optimize by counting down? divide & conquer? [[file:./src/runner/math.4th::25]]
TODO optimize by recursively apply exponent/2 [[file:./src/runner/math.4th::46]]
TODO optimize for byte by byte in stage0, longs and double longs elsewhere? [[file:./src/lib/byte-data/stage0.4th::35]]
TODO optimize with a log2? [[file:./src/runner/math/division.4th::3]]
TODO optimize with its own series, or combine steppers [[file:./src/lib/math/float32.4th::329]]
TODO out of bounds [[file:./src/tests/lib/structs/seq-field.4th::32]]
TODO output assoc list for construction [[file:./src/bin/scantool.4th::9]]
TODO partial and map [[file:./src/lib/asm/bit-op.4th::55]]
TODO pass eip as an argument to a top level eval. Likewise with the dictionaries and other state like registers. [[file:./src/runner/thumb/init.4th::36]]
TODO patch in lengths and offsets [[file:./src/tests/elf/bones/with-data.4th::337]]
TODO pick printer based on field type [[file:./src/lib/structs/writer.4th::50]]
TODO place in separate file for small builds [[file:./src/runner/thumb/ops.4th::497]]
TODO pop and push could be done in code word for each vector length [[file:./src/runner/thumb/vfp.4th::47]]
TODO power from 1? [[file:./src/lib/math/float32.4th::134]]
TODO preallocate results and requests? the enqueing thread could drop the stack before the worker gets to it, or vice versa with the results. Though zero copy [there is one to the thread stack] is nice. [[file:./src/lib/threading/worker.4th::7]]
TODO print field name; assoc list? [[file:./src/interp/boot/debug/program-args.4th::28]]
TODO prioritize threads and check the run order [[file:./src/tests/lib/threading/priority-lock.4th::13]]
TODO proper call trace [[file:./src/interp/signals.4th::98]]
TODO push the ABI's locals in cs-reg and dict-reg, but before the callback's args. [[file:./src/runner/thumb/ffi.4th::107]]
TODO quit that resets stack, dict, fp; or interp w/ debug prompt [[file:./src/lib/catch.4th::67]]
TODO raise an error [[file:./src/lib/linux/epoll.4th::32]]
TODO raise an error [[file:./src/tests/lib/strings.4th::133]]
TODO raise an error [[file:./src/tests/lib/strings.4th::136]]
TODO raise an error [[file:./src/tests/lib/strings.4th::143]]
TODO raise an error [[file:./src/tests/lib/strings.4th::146]]
TODO raise an error [[file:./src/tests/lib/strings.4th::153]]
TODO raise an error [[file:./src/tests/lib/strings.4th::156]]
TODO raise an error [[file:./src/tests/lib/strings.4th::163]]
TODO raise an error [[file:./src/tests/lib/strings.4th::166]]
TODO raise an error [[file:./src/tests/lib/strings.4th::174]]
TODO raise an error [[file:./src/tests/lib/strings.4th::182]]
TODO raise an error [[file:./src/tests/lib/strings.4th::186]]
TODO raise an error [[file:./src/tests/lib/strings.4th::193]]
TODO raise an error [[file:./src/tests/lib/strings.4th::197]]
TODO raise an error [[file:./src/tests/lib/strings.4th::204]]
TODO raise an error [[file:./src/tests/lib/strings.4th::208]]
TODO raise an error [[file:./src/tests/lib/strings.4th::215]]
TODO raise an error [[file:./src/tests/lib/strings.4th::219]]
TODO raise an error [[file:./src/tests/lib/strings.4th::22]]
TODO raise an error [[file:./src/tests/lib/strings.4th::25]]
TODO raise an error [[file:./src/tests/lib/strings.4th::31]]
TODO raise an error [[file:./src/tests/lib/strings.4th::34]]
TODO raise an error [[file:./src/tests/lib/strings.4th::40]]
TODO raise an error [[file:./src/tests/lib/strings.4th::45]]
TODO raise an error [[file:./src/tests/lib/strings.4th::52]]
TODO raise an error [[file:./src/tests/lib/strings.4th::55]]
TODO raise error [[file:./src/lib/byte-data/stage1.4th::42]]
TODO raise error [[file:./src/north/words.4th::33]]
TODO raise errors from next-token; pop reader first [[file:./src/interp/interp.4th::104]]
TODO read return 0 on EOF, not -1; could use 0 for length on eof but need a flag for the first read. [[file:./src/interp/reader.4th::56]]
TODO reader stack: pop off when EOF reached [[file:./src/interp/reader.4th::57]]
TODO refactor [[file:./src/lib/time.4th::217]]
TODO relative data stack? [[file:./src/interp/data-stack.4th::1]]
TODO remove the condition once rebuilt [[file:./src/interp/boot/core.4th::208]]
TODO remove this file? [[file:./src/north/north.4th::1]]
TODO remove unused format fun fields [[file:./src/tests/lib/cpio.4th::139]]
TODO rename to scantool [[file:./src/bin/scantool.4th::4]]
TODO reorder args to match actual asm [[file:./src/lib/asm/thumb/v2.4th::211]]
TODO reordering start and end breaks the raycaster, why bresenham was used explicitly and why axis rays fail w/ vline and hline [[file:./src/lib/geometry/lines.4th::3]]
TODO reset stack & state [[file:./src/runner/thumb/ops.4th::215]]
TODO reset token list more often? [[file:./src/lib/scantool/scantool.4th::194]]
TODO return nothing [[file:./src/runner/tests/ffi/calls.4th::37]]
TODO return with output adjusted to first digit and a length [[file:./src/interp/output/dec.4th::6]]
TODO returns need to pop the catcher. Have try start a frame that returns here? Still needs to return from parent frame. Flag frame pointers as being nested? [[file:./src/lib/catch.4th::56]]
TODO save ds [[file:./src/runner/thumb/state.4th::1]]
TODO save fp and eval-ip too? [[file:./src/runner/x86/linux.4th::1]]
TODO save lr, mark data [[file:./src/runner/thumb/init.4th::2]]
TODO save state before calling? r4-7 saved by called per ABI. r8-15? [[file:./src/runner/thumb/ffi.4th::3]]
TODO scr modes: rounding, vector, stride, traps; set on every op? [[file:./src/runner/thumb/vfp.4th::19]]
TODO scroll buffer? [[file:./src/lib/tty/context.4th::50]]
TODO separate bright and bold? [[file:./src/lib/tty/constants.4th::7]]
TODO set dict in colon def from const [[file:./src/runner/thumb/init.4th::37]]
TODO should be in the prompt reader [[file:./src/interp/interp.4th::45]]
TODO should be up-stack-bytes [[file:./src/lib/strings.4th::32]]
TODO should be up-stack-bytes [[file:./src/lib/strings.4th::57]]
TODO sigchld handler [[file:./src/tests/lib/process.4th::11]]
TODO simplify compiling-read & merge with compiler.4th's [[file:./src/interp/interp.4th::105]]
TODO sorting of stats, getopt options for outputs  [[file:./src/bin/scantool.4th::5]]
TODO split like interp for android and linux [[file:./src/bin/runner.4th::1]]
TODO sqrt, exponent, fraction [[file:./src/runner/thumb/vfp.4th::48]]
TODO start with software division and detect Thumb2 from HWCAPS or /proc/cpuinfo, or trapping illegal instructions, or using NORTH-PLATFORM. going to need a list of init functions. [[file:./src/runner/thumb/math-init.4th::1]]
TODO stats assoc on structs [[file:./src/bin/scantool.4th::10]]
TODO stats formatting: column sizes, html? [[file:./src/bin/scantool.4th::7]]
TODO store eip and sp for retry [[file:./src/lib/catch.4th::33]]
TODO store file name and count lines in readers [[file:./src/interp/interp.4th::91]]
TODO suffix with -offset [[file:./src/lib/asm/thumb/v1.4th::193]]
TODO suffix with reg? [[file:./src/runner/thumb/ops.4th::6]]
TODO supply input and output fds [[file:./src/interp/interp.4th::58]]
TODO swap place and n so it reads as an op on place? [[file:./src/lib/math/int32.4th::102]]
TODO swap seq and list order? [[file:./src/lib/sort/merge-sort.4th::81]]
TODO swap the word order to watch native byte order? [[file:./src/lib/byte-data/32.4th::1]]
TODO switch to defs gets these included when cross compiling. [[file:./src/interp/list.4th::17]]
TODO switch to uint< which needs tty-filled-box to check size [[file:./src/north/words.4th::344]]
TODO take the fd, into a string [[file:./src/interp/output/float32.4th::3]]
TODO test abnormal exit, signals to child [[file:./src/tests/lib/linux/threads.4th::39]]
TODO test for 28 days in february [[file:./src/tests/lib/time.4th::21]]
TODO test generated accessors [[file:./src/tests/lib/structs/dsl.4th::23]]
TODO test negative, huge, indexes? [[file:./src/interp/tests/strings.4th::17]]
TODO test negative, huge, indexes? [[file:./src/interp/tests/strings.4th::7]]
TODO the other digests could reuse this block partitioning [[file:./src/lib/digest/sha256.4th::257]]
TODO thread-kill & thread-join: muscl uses TLS, wait4 doesn't consider the thread's pid a child. [[file:./src/lib/linux/threads.4th::4]]
TODO throw error [[file:./src/lib/linux/threads.4th::126]]
TODO throw error [[file:./src/lib/stack/mmap.4th::7]]
TODO top level IF nesting, reuse bash version? [[file:./src/interp/interp.4th::269]]
TODO try other types of strings [[file:./src/tests/lib/strings.4th::69]]
TODO try/rescue/end-try where rescue provides the handler. [[file:./src/lib/catch.4th::7]]
TODO turn black or sky color when way too far [[file:./src/demos/tty/raycast.4th::672]]
TODO union of 32 and 64 bit values [[file:./src/lib/linux/epoll.4th::25]]
TODO update callers that don't expect returns [[file:./src/interp/dictionary.4th::21]]
TODO update when mapping the stack? [[file:./src/cross/iwords.4th::24]]
TODO update when mapping the stack? [[file:./src/cross/iwords.4th::35]]
TODO usage in [cross] compiling out [[file:./src/lib/structs/defining.4th::4]]
TODO use ' copy [[file:./src/lib/tty/buffer.4th::212]]
TODO use a list to store the reader stack. no need for readers to know. [[file:./src/interp/interp.4th::89]]
TODO use a reduce function [[file:./src/lib/elf/stub32-dynamic.4th::429]]
TODO use copy [[file:./src/lib/byte-data.4th::41]]
TODO use f* or v*.type mneumonics? [[file:./src/lib/asm/thumb/vfp.4th::195]]
TODO use fun-reduce [[file:./src/lib/math/float32.4th::116]]
TODO use map-seq [[file:./src/interp/boot/debug/fancy-stack.4th::105]]
TODO usings locals is a hack. should have begin-frame on the stack before compiling-read, but def vs colon. [[file:./src/cross/defining/frames/interp.4th::5]]
TODO vector operations: up to 4 floats. [[file:./src/runner/thumb/vfp.4th::45]]
TODO vectors from pointer [[file:./src/runner/thumb/vfp.4th::49]]
TODO verify [[file:./src/runner/thumb/vfp-constants.4th::10]]
TODO void returns? >=4 args, mixed with floats? [[file:./src/runner/tests/ffi/calls.4th::67]]
TODO wait for set, clear, change [[file:./src/tests/lib/threading/barriers/bit-mask.4th::61]]
TODO what about streamed archives? can only be read once. list and done, extract and done. [[file:./src/lib/cpio.4th::18]]
TODO what pid does wait and kill need? [[file:./src/lib/linux/threads.4th::266]]
TODO what's the standard's way of doing rounds with partial blocks? [[file:./src/lib/digest/sha256.4th::326]]
TODO when the sides are both on, but the center is off, fill in the middle hole. [[file:./src/demos/tty/clock/tty.4th::9]]
TODO when the sides are on, but the horizontal is off, fill in the respective corner. [[file:./src/demos/tty/clock/tty.4th::8]]
TODO whitespace? is missing a THEN and is getting an extra 0x40 [[file:./src/interp/boot/cross/iwords.4th::4]]
TODO with shift [[file:./src/tests/lib/asm/bit-op.4th::13]]
TODO would better match boot/cross by adding an out-origin [[file:./src/cross/words.4th::3]]
TODO write stub header, data, program & section headers, and then ELF header. [[file:./src/tests/elf/bones/with-data.4th::336]]
TODO write to string and compare [[file:./src/tests/lib/time.4th::10]]
TODO zero unused memory? [[file:./src/interp/boot/cross.4th::46]]
TODO ░▒▓█▄▌▐▀ needs more than a byte and unicode encoder, or a remapping. could use for real shading in 16, 256, millions of colors. [[file:./src/demos/tty/raycast.4th::220]]
TODO? inits with: aux env argv argc fp cs dict ds _start [[file:./src/runner/thumb/init.4th::19]]
364
#+end_src
