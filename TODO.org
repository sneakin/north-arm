#+TITLE: North: Bash Bootstrap

* Goals
** Ultimate:
ELF file that only has an offset thread into a dynamically linked symbol table and interpreter.
** DONE Primary:
Build an ELF file that can execute the code to build itself.
** Secondary:
North Runner compatible with the x86 runner that can mmap a file to execute.
** Get out of the Turing Tar Pit.
* Tasks
** now
*** struct fields don't resolve right w/ b and b1 fields.
*** swap tty-cursor-to's arguments to row, column
*** cross-lookup in bash takes one argument, interp's version takes two.
*** DONE cpio file format as arguments
*** float tests
*** uint64
*** core.4th needs a split to allow inclusion in binary
** Sooner than later
*** Crashes with ~literal int32 123~
*** s" places the string onto the data stack polluting the binary. Special interp version for defproper?
*** DONE [#A] structures
*** TODO [#A] variables with data on stack or data segment. initialized on load
*** [#B] ELF exports
*** TODO [#A] Build improvement
**** Multiple targets: thumb 1 & 2, a32, a64, x86, bacaw; android, linux, baremetal; static, dynamic
**** Dependencies: only execute/scan for load
*** Local variables
*** North porting
*** [#B] Error handler
*** [#C] Zero copy reading
Would only work when the token does not span reads.
*** Compiling to assembly
*** egl & TTY drawing
*** bare metal
*** Ports
**** x86
**** bacaw
*** quine
The ability to dump the program to source code into a loadable and buildable format.
**** Disasm
**** immediates
**** hexadecimal prefixes
**** cstring needs to not appear before string literals
*** [#A] builder binary
**** Needs immediate dictionary writing and overrides.
** Standard Forth
*** Comma & period words
Standard Forth uses these for stream output.
Switching to < or > like standard stack ops.
**** byte data
**** asm ops
*** CASE
#+BEGIN_SRC forth
CASE
  N OF ... ENDOF
  else...
ENDCASE
#+END_SRC
*** Loops
#+BEGIN_SRC forth
begin ... condition until
begin ... while condition... repeat
max init do ... loop
leave
return
+loop
#+END_SRC
*** Misc
0sp - zero stack to init
rot a b c -- b c a
-rot a b c -- c a b
pick -> overn
nip -> swap drop
tuck a b -- b a b

lshift rshift arshift

include file : loads file
include? file : loads file if it's not already loaded
forget file : unload the file's definitions
anew : called when entering a new file for bookkeeping for forget.
? +!
*** struct
#+BEGIN_SRC forth
:struct name
  type field-name
  ...
;struct
#+END_SRC
*** defer
Executable words that can be rebound with IS.
#+BEGIN_SRC forth
defer motd
' hello is motd
motd ( calls hello )
what's motd ( -> ' hello )
#+END_SRC
*** [IF]
[IF] and other bracketed conditions behave like #if in C.
*** locals
{ arg1 arg0 | local0 -- result }
** String readers have length limit of token-buffer-max. Could/should read more.
** Full cpio archive concatenated onto binary.
*** needs memory decoding instead of file reads
*** And/or cpio header file offset argument
*** cpio encoder
*** compressed?
** Postpone lookup with and without immediates
** Using ~'~ in a definition should be like ~literal~
#BEGIN_SRC
: ' hello literal hey assert-equals
#END_SRC
** Makefile cross compile support
*** Makefile needs TARGET and HOST documented
*** Makefile detection for HOST defaulted to aarch64 forcing use of qemu.
*** Runner needs targeting
** For op specific data: if the word is in R1, can that be used to address the data field for...? perhaps not for init.
** dynamic linking
*** GNU
**** .dynstr section header for the dynamic string table
**** find what's keeping relocations from using actual symbol addresses
**** Android / GNU switch
** TODO abs-int or int-abs?
** runner ops
*** TODO exec -> exec-cs-offset, interp/boot/cross.4th aliases to exec-cs
*** DONE call ops and return to next
*** variables on stack
*** array index interpreter
*** array of words common with x86 to boot strap a full list of words
** Pi Zero
Lacks thumb2 and therefore division and coprocessor ops.
*** DONE Start with software divide
*** TODO Swap to/from HW & SW
*** TODO Detect thumb2 in HWCAPS on start
**** trap SIGILL
*** TODO A32 coprocessor ops
*** DONE Do new branch ops work?
** compile loop:
*** DONE relocate calls and pointers but not data literals
*** DONE immediate / compiling words & dictionary
*** DONE compiler lookup
*** DONE compile with different dictionaries
*** DONE Base offset for word addresses
** Reader
*** DONE Rewrite from bash to Forth?
*** Reuse reader from North Core? read-byte level.
Call frames, stack & data pointer math
** Writing
*** DONE ddump to binary file
*** DONE initial code / header & footer
**** DONE ELF32 files
**** ELF64 files
**** Blobs for Bacaw
**** EXE files
*** extract strings from data into section
*** symbol table section
*** TODO Data RO and BSS sections
** Defining words
*** DONE Compiled words: create & def -> :
*** DONE Compiler words: :
*** DONE Immediates: immediate
** Assemblers
*** TODO Two passes with labels
*** TODO New-lines write instructions; one per line
*** TODO Binary lacks features to compile a bare bones program.
**** Seg faults
**** constants
**** load-core features
**** ISAs
***** Bacaw
***** x86
***** TODO athumb
****** TODO Branching and return in Thumb; to call ops in ops and call threading
****** Thumb Assembler meta words: mov checks arg range
***** TODO aarch32
****** TODO Status register and coprocessor ops
****** TODO More op coverage
***** aarch64
****** assembler
****** ELF64
*** Bacaw
*** x86
*** athumb
**** DONE Branching and return in Thumb; to call ops in ops and call threading
**** Thumb Assembler meta words: mov checks arg range
**** TODO On thumb, use aarch32 ops to access coprocessor
*** TODO aarch32
**** TODO Status register and coprocessor ops
*** aarch64
**** assembler
**** ELF64
** DONE jumps & loops
*** DONE relative jumps
*** DONE returns
*** DONE IF immediate to count offset
** DONE read strings properly in load, using immediates
** DONE load needs to be callable from definitions.
Needs to interpret input when called while not reading additional input.
** DONE Building needs to allow different program inclusions
** Returns that eat frame args and shift return values
Have return1-n now.

#+BEGIN
def f ( x y z -- a b )
  a b returns 3 2
end

def f ( x y z -- a b )
  [ a b ] return
end

[ x y z ] f
=> [ a b ]

4 1 2 + dup 3 overn f

#+END
** Building
Need to better handle targets and loading their sources. Too much duplication.
Pass sources in as args from Makefile? Every file requires what it needs?
*** Loading the assembler words into a Bash generated binary vs. catting them in and dumping?
**** Words needed for catting:
Cat in the better compiler.
Cat in just the assembler.

***** Top level
const> var>
load

***** Functions
Creating dictionary entries: make-dict-entry create
dict-entry accessors
compiling-read with immediates: reuse
comments & strings
string appending

Dictionary entries that are and have real pointers.
All their fields need CS added.
Threads too: offset & indirect.
Data stack: relative or absolute?

*** DONE argc/argv
**** TODO getopt like function
** DONE Separate ops and definitions
** TODO Separate bash specific defs from the general
** DONE Variables
*** TODO Move to own segment
** DONE Flip int-sub args in runner
** Use just 'end' instead of 'end.*'?
** defcol & def can share more code
** Reader return: drop for negative lengths on reads subsequent to failure
** DONE compiling-read with empty defs, defcol with single element
concat-seq down-stack uses
revmap-stack? stack-find?
** 16 bit op codes: needs int32, literal, etc. to be immediates that write proper sized bytes to op sequence.
** DONE make-noname: call a function with predetermined arguments like `equals?` with one argument.
*** TODO Rename to curry?
** TODO [#A] Dictionary entry code value: has to point to real code?
Would be nice to have colon definitions as code words.
** TODO Variable data allocated on init, value outside the dictionary.
** TODO Lisp style dictionary: assoc list of functions
** DONE Remove unasked output
** Tail call optimizations
*** Proper colon defs
*** Framed calls
** TODO Reader needs its own token buffer; no need to return last char/status, negative happens next read
** TODO create> should return the entry, does-col should use it
Bash specifically.
** DONE load: reader needs data slot and finalizer, and a stack of readers
** TODO stage1
*** DONE Hexadecimal numbers for input
*** DONE Load or cat?
load needs file opening and reading with a reader stack.
*** DONE definitions writen to the data stack
*** definitions with code reuse
*** DONE definition definability for macros
*** DONE String concatenation: ++
** TODO Standard wording
*** TODO c" returns a 2 string
*** Returning from colon def vs frame's return
*** return stack words
** map-string good candidate for cons on stack safety.
** Dictionary lookup with word lists / modules
*** `word-list word` where `word-list` is an immediate that looks `word` up in the named word list.
*** import for use in current module
*** brings in name spacing: what word lists to search when compiling
*** in-package & export/public & import interplays
** Lambda / Code blocks & lists: use [ ] to delineate
** DONE To cross compile: need const>, var>, get-word, set-word, IF/ELSE/THEN
** ELF32
*** TODO Exports
*** TODO ELF dynamic linking of imports
**** DONE Proper symbol flags
**** DONE Library loading
**** DONE Function imports
**** TODO Add symbols only once
**** TODO Dynamically linked variable
*** ELF .o files with symbol table
*** TODO ELF symbol table of imports
*** TODO proper DT_HASH
** Runner's jumps op offset or byte offset?
** Compile list of words into list of assembly calls.
** North
*** TODO Missing/stubbed words
*** Move to defcol, def, ":" convention.
** Syscalls
*** mmap memory
*** data stack using brk
*** mmap file
**** Zero copy reads with mmap / from strings; no copy if no more data is read when reading a token
**** mmap output and set data stack to write to a file.
*** DONE Catch segfaults & other errors
*** Spawn a thread
*** fork & exec
** Testing
*** Move tests to assert-equals
*** Test DSL
** TODO quit needs to reset dict in case words are on the stack
*** Variables stored outside dictionary.
** TODO remove early uses of R3 to track calls and returns
** DONE Organization
*** bash forth
**** compiler
*** assemblers
*** lib
*** stage1: thumb forth
**** interpreter
**** compiler
**** runner
**** thumb forth + assembler
*** stage2
**** compiler
** code fields need to point at words, not code
** Tension between output offsets and pointers; dhere is an offset or translate when needed?
** null (last dictionary) lets lookup return a null, default object.
** DONE string readers
" returns a pointer & length when bash cross compiles.
" returns just a pointer in interp
Maintaining the length some where is good.
s" c" tmp" d" ; some only make sense when interpreting at top level
Touches words that take pointer or a pointer/length pair.
*** Currently
| fn   | TL storage | def storage | returns               |
| c"   | stack      |             | chars length          |
| d"   | data       | data        | pointer length        |
| s"   | stack      | data        | pointer length        |
| tmp" | buffer     |             | pointer length        |
| "    | ??         | ??          | bash: pointer         |
|      |            |             | cross: pointer length |
|      |            |             | interp: pointer!      |
*** Desired
| fn   | TL storage | def storage | returns               |
| c"   | stack      |             | chars length          |
| d"   | data       | data        | pointer length        |
| s"   | stack      | data        | pointer length        |
| tmp" | buffer     |             | pointer length        |
| "    | stack      | data        | pointer |

** DONE load from strings
** save ELF runtime image
*** Needs .data size
** Quine: dump loadable source code
** generic next that calls a function to get the next word depending on source or flavor
To unify interpretation of tokens and indirect threads.
*** immediates
*** check if literals and pointers are words
** include textual source in binary?
** TODO error handling that quits and/or starts a new interpreter loop
** Make output functions take an fd argument.
** TODO Eliminate needless padding
Zero needed atbend of definitions for decompile.
** map-seq, map-seqn: prefer lengths over terminator at end
** TODO back port compiling-read
** TODO DRY cross compiling code
*** TODO out-off' should be ' but using the compiling-dict; likewise with [']
dry up with comp' immediated as ' to use compiling-dict.
*** TODO op sized jumps instead of bytes
** TODO move defining/*-boot files to interp/boot/defining, or put arch specific files under a cross/${arch}/
** TODO Towards Lisp
*** Dictionary as argument
**** DONE to compiler
**** to interpreter
*** Dictionary list & first class functions
*** TODO Types
*** DONE Structures
*** Sequences
*** Garbage collection
**** Pointers that point down the stack are bad.
     The locals...
** after loop
*** Exports, symbol table
*** builder executable that's passed files to build
**** immediate list built for executable
**** flags to toggle static/dynamic, linux/android, elf32/64
*** sigill trap to detect cpu ops
** x86
** Interpreted IF & UNLESS in Bash could not be postponed
** DONE Called ops & LR
Calling ops like any other procedure makes subroutine call threading easy.
*** LR only needs to be pushed if an op makes a call.
**** Returns are popping into PC
**** For an op without calls just a mov PC, LR.
*** Ops can get back to next if next sets LR.
*** When does next exit??
Needs an explicit BYE. exit gets out of a thread, restoring eip.
*** TODO Where LR should be restored?
**** Only save LR with an outer-exec? Exit by clearing stack and setting PC. Or exit up all the way.
**** Mixing threading types? Puts responsibility on enter and exit to return to the right procedure caller.
***** Requires defcol to factor in a multiple valued return record. swap-call-frame
EIP, LR
*** Assembling Call threading
**** Ops & Compiled definitions
branch-link
possible jump table
**** Interpreted words
Inline exec
**** Should be the same so runtime changes can happen.

** Numbers
*** Prefixed hexadecimal output: 0xNN
*** DONE Arbitrary base output
*** Floating point input
*** Floating point output
**** overflows integers and fraction needs zero padding
**** exponent: NNeXX
*** Floating point constants: pi, e, +/- infinity, nan, +/- 0
** Math
*** log2, logn
**** DONE integers
***** optimize by splitting
**** floats
*** exp, pow, sqrt
**** integers
**** floats
**** optimize
*** trigonometry: sin, cos, tan, asin, acos, atan
**** circular
**** hyperbolic
*** big integers
**** arithmetic
**** logic
**** comparisons
**** writers
**** conversions
* Thoughts
** def syntax
*** Current
var>
const>
alias>
defcol => defcolon
def
:

*** General def and lists
Scheme style symbol table

**** Dictionary
***** dict is an assoc list
***** values are function objects
Head points to a Type that has a caller attribute.
Tail points to the definition sequence.

**** Sequences
[ exprs... ] => sequence
'[ exprs... ] => sequence of resolved, but unexecuted, symbols

**** Variables
def name value
def name s[ exprs... ]
**** Colon definitions
def name [ exprs... ]
def name colon[ exprs... ]
**** Framed colon definitions
def name fun[ exprs... ]
def name begin[ exprs... ]
def name fun( args... ) exprs... end

def name fun exprs... end
def name begin exprs... end
def name fun( args... )[ exprs... ]

def name [ args... ] do exprs... end
def name [ args... ] { exprs... }
*** Cross compiling reads
Need to restore state. Globals make this tough, but compiler object with output stack, immediates, and words can handle that.
** Optimizations
*** Constants can be immediates
*** Inlining
*** To assembly call threading
*** repeated call sequences that have no side effects and return the same values each call can set a generated binding.
*** Arithmetic between constants
*** Division and multiply by powers of two
*** Tail calls
*** function that can call defs and ops w/o pushing return address or creating frames, name it exec?
** dict register -> this pointer
Calls in a definition are indexed from the register.
Dictionary specified at compile time by specifying a type.
** Next words
*** Current
func> tokens+
func: tokens+
*** Possible
Difference in the itherpretation of what gets read and returned.

**** Compiling state with lookup and immediates.
func[ tokens... ]
func [ tokens... ]

Reads in a colon definition.

**** less than compiling. With immediates?
func< (types|atoms)+ >
func < (types|atoms)+ >

Needed for creating generic types via generator functions.
Interpretation semantics: at minimum, words looked up, value placed on stack.
'>' completes the read with word values on stack.

**** Other syntaxes
***** Lists
func( tokens+ )
func{ tokens+ }

Immediates?

***** Strings
func" chars*"
func/ chars*/

* In the source
#+NAME todos
#+BEGIN_SRC shell :results output org
grep --exclude \*~ -Hn -E "todo|fixme" -r ./src | sed -E -e 's/(.+):([0-9]+):(.*)\( +(todo.*|fixme.*) +(.*) +\)/\4 \5 [[file:\1::\2]]/g' -e 's:todo:TODO:g' -e 's:fixme:FIXME:g' | sort
#+END_SRC

#+RESULTS:
#+begin_src org
./src/bash/builtins.sh:111:# TODO var> needs to store value on stack by making a const> to here.
./src/bash/core.sh:7:# TODO try using a variable to track here. with zeroing out on pop. no quoting truncation. 
FIXME "boo" == "boot"? Need to check lengths on both. Checking for 0 byte at end works, but not perfect. [[file:./src/interp/strings.4th::5]]
FIXME "literal int32 0" caused problems. [[file:./src/interp/list.4th::29]]
FIXME FFI callbacks are loading state from wrong offsets. changes depending on how the trampoline's length. [[file:./src/runner/thumb/ffi.4th::108]]
FIXME POSTPONE needs immediate lookup, but immediate support in the output is needed. [[file:./src/interp/boot/cross.4th::169]]
FIXME does it fail on ops that use R1 to access the entry? [[file:./src/runner/thumb/ops.4th::92]]
FIXME doesn't work with 32 bit cells [[file:./src/lib/byte-data.4th::64]]
FIXME drop the drop [[file:./src/interp/list.4th::23]]
FIXME extraneous negates? [[file:./src/lib/math/float32.4th::143]]
FIXME for bash: no poke [[file:./src/lib/list.4th::69]]
FIXME length one short in base 8 from parsing max int [[file:./src/interp/numbers.4th::32]]
FIXME literal work in both? [[file:./src/cross/defining/proper.4th::34]]
FIXME may not have a begin-frame to find. [[file:./src/interp/boot/core.4th::177]]
FIXME nan right? [[file:./src/runner/thumb/vfp-constants.4th::3]]
FIXME one too many [[file:./src/lib/structs/defining.4th::63]]
FIXME one too many [[file:./src/lib/structs/seq-field.4th::9]]
FIXME perfect spot for a tailcall / continue> [[file:./src/interp/interp.4th::41]]
FIXME reader breaks at multiples of its buffer? [[file:./src/interp/characters.4th::24]]
FIXME rounded up? [[file:./src/runner/tests/float.4th::147]]
FIXME something does not like single byte names [[file:./src/lib/asm/bit-op.4th::31]]
FIXME top level IF gets shadowed by core.4th's IF [[file:./src/lib/lib/lz4.4th::8]]
FIXME word ends up in the binary. [[file:./src/interp/boot/cross.4th::171]]
FIXME? value of 1 makes more sense? [[file:./src/runner/tests/math.4th::37]]
TODO  needs to be variable [[file:./src/interp/boot/core.4th::266]]
TODO +/-1, 0 special cases of N [[file:./src/lib/math/float32.4th::239]]
TODO 0 and null separation [[file:./src/tests/lib/list.4th::12]]
TODO Sort two element seqs into pairs that use merge-lists for list->seq input? Do away with merge-seqs. [[file:./src/lib/sort/merge-sort.4th::109]]
TODO [e]poll based reactor [[file:./src/lib/process.4th::3]]
TODO a flop and bin-flop code word that calls a smaller op in data.code words that assist inlining. [[file:./src/runner/thumb/vfp.4th::3]]
TODO add multiple inheritance to struct: type, offset [[file:./src/lib/structs/defining.4th::103]]
TODO add relocation to list, symbol to another [[file:./src/cross/dynlibs.4th::44]]
TODO add struct-fields for struct and struct-field [[file:./src/lib/structs/struct.4th::10]]
TODO adjust output dictionary and pointers by out-offset; or make dhere, dpoke, dpeek offset? [[file:./src/interp/boot/cross.4th::1]]
TODO an extra zero is padded between entries and first data [[file:./src/cross/defining/colon-boot.4th::13]]
TODO apply offset in reversal, token lists so lookup is done on reversal? immediate lookup during read? [[file:./src/interp/compiler.4th::81]]
TODO apply op-mask [[file:./src/runner/thumb/ops.4th::133]]
TODO are output immediates placing output words in defs? [[file:./src/interp/boot/cross/iwords.4th::3]]
TODO arg for fd & total number of digits [[file:./src/interp/output/float32.4th::17]]
TODO array reference fields [[file:./src/lib/structs/seq-field.4th::3]]
TODO asin, acos, atan [[file:./src/lib/math/float32.4th::305]]
TODO assert other stats? [[file:./src/tests/lib/cpio.4th::32]]
TODO atomic types [[file:./src/lib/structs/writer.4th::73]]
TODO auto writers to data stack [[file:./src/lib/asm/bit-op.4th::6]]
TODO bc & x86 runners move then poke [[file:./src/interp/data-stack.4th::21]]
TODO benchmark / testing execution time and memory use with big O: loop through different sizes and try to match curve to big O equation. chart output? [[file:./src/lib/bm.4th::10]]
TODO benchmark, optimize [[file:./src/lib/math/float32.4th::125]]
TODO better error [[file:./src/north/north.4th::75]] THEN
TODO binary output structures [[file:./src/lib/structs/defining.4th::3]]
TODO bionic and glibc have different return values. [[file:./src/runner/tests/ffi/calls.4th::55]]
TODO bring back IF [[file:./src/interp/interp.4th::237]]
TODO byte-string-equals? needs? [[file:./src/lib/io.4th::8]]
TODO cap number digits to buffer size, will require useless divide[s] or divide by radix [[file:./src/interp/output/dec.4th::5]]
TODO changing during compilation of output words may conflict with the execution ops. [[file:./src/cross/constants.4th::3]]
TODO cleanup [[file:./src/tests/lib/linux/threads.4th::22]]
TODO cleanup thread before it exits? [[file:./src/lib/linux/threads.4th::4]]
TODO cmp r0 before pop [[file:./src/runner/thumb/copiers.4th::38]]
TODO comparisons conditions without 1 or 0 on stack. [[file:./src/runner/thumb/vfp.4th::4]]
TODO constants for fields > 1 [[file:./src/lib/asm/bit-op.4th::4]]
TODO constants need to be vars. single return strings. lists & strings on stack prevent straight arg ordering. [[file:./src/cross/builder/interp.4th::1]]
TODO could reuse and combine to half iterations [[file:./src/lib/math/float32.4th::227]]
TODO detect comments; switch to leader, terminator pairs? [[file:./src/interp/interp.4th::239]]
TODO detect format from magic [[file:./src/lib/cpio.4th::44]]
TODO disassembly of a value to forth [[file:./src/lib/asm/bit-op.4th::5]]
TODO does int32 get left behind for numbers as [IF] conditions? [[file:./src/interp/interp.4th::238]]
TODO does-frame [[file:./src/cross/defining/frames-boot.4th::11]]
TODO does-frame [[file:./src/cross/defining/frames.4th::7]]
TODO drop dict on error [[file:./src/interp/dynlibs.4th::69]]
TODO drop out-dict [[file:./src/cross/dynlibs.4th::71]]
TODO drop stack values, setup return landing pad; moy not be possible with the bash forth [[file:./src/lib/catch-bash.4th::53]]
TODO drop stack values? [[file:./src/lib/catch.4th::55]]
TODO drop terminator search and use length [[file:./src/cross/defining/frames-boot.4th::17]]
TODO drop terminator search and use length [[file:./src/north/north.4th::116]]
TODO dynamic link sections to load libc [[file:./src/tests/elf/bones/with-data.4th::340]]
TODO error [[file:./src/interp/interp.4th::243]] return THEN
TODO error [[file:./src/lib/process.4th::80]]
TODO error [[file:./src/lib/structs/defining.4th::28]]
TODO error [[file:./src/lib/structs/struct-field.4th::62]] s" No field" write-line/2
TODO error [[file:./src/north/north.4th::82]]
TODO error [[file:./src/north/north.4th::91]]
TODO error [[file:./src/north/north.4th::95]]
TODO error if argument is not a struct [[file:./src/lib/structs/struct-field.4th::56]]
TODO error or big math [[file:./src/runner/math.4th::60]] 0 2 return1-n THEN
TODO escaping [[file:./src/interp/decompiler.4th::15]] dquote write-byte
TODO factor in the correct days of each month [[file:./src/lib/time.4th::61]]
TODO find any prior import entry. single symbol w/ multiple relocs [[file:./src/cross/dynlibs.4th::43]]
TODO fix up a CASE for the interpreter; or make jump-rel & if-jump consistent on cell-size multiplier [[file:./src/lib/case.4th::10]]
TODO fpscr not setting [[file:./src/runner/thumb/vfp.4th::50]]
TODO fractional exponents, exp can use fractional exponents: x^y = e^[ln[x]*y];  x^[1/n] = e^[ln[x]/n] [[file:./src/lib/math/float32.4th::240]]
TODO freeing the catcher [[file:./src/lib/catch.4th::57]]
TODO get rid of the terminator [[file:./src/cross/defining/colon-boot.4th::24]]
TODO handle overflow; base prefixes: 0x, 2#101; negatives [[file:./src/interp/numbers.4th::19]]
TODO highlight words; seqs with sizes. [[file:./src/interp/boot/debug/fancy-stack.4th::3]]
TODO immediates get shifted? [[file:./src/lib/asm/thumb/arm-translated.4th::53]]
TODO immediates get shifted? [[file:./src/lib/asm/thumb/v1.4th::60]]
TODO import-var> or extern> [[file:./src/runner/libc.4th::9]]
TODO in-range? should drop args; and to ignore arg order [[file:./src/north/north.4th::79]]
TODO include zero? [[file:./src/lib/math/float32.4th::106]]
TODO inherited fields [[file:./src/lib/structs/writer.4th::74]]
TODO initializers for structs and each field [[file:./src/lib/structs/defining.4th::76]]
TODO inplace qsort [[file:./src/lib/sort/merge-sort.4th::110]]
TODO interp gets a reader argument, load uses a new reader and interp loop [[file:./src/interp/interp.4th::81]]
TODO inverted list of auxvec constants [[file:./src/interp/linux/auxvec.4th::25]]
TODO look for fields in supers [[file:./src/lib/structs/struct-field.4th::57]]
TODO map-fn w/ stepper [[file:./src/lib/math/float32.4th::393]]
TODO merge-sort sequences [[file:./src/lib/sort/merge-sort.4th::3]]
TODO mmap errors have a range [[file:./src/lib/linux/mmap.4th::35]]
TODO more primitive: current-frame here set-current-frame [[file:./src/runner/thumb/frames.4th::6]]
TODO more primitive: current-frame parent-frame set-current-frame [[file:./src/runner/thumb/frames.4th::17]]
TODO move eip, frame, rstack, .data section into continuation [[file:./src/lib/catch.4th::8]]
TODO multi-celled integers [[file:./src/runner/thumb/big-math.4th::28]]
TODO multipliers / shifts [[file:./src/lib/asm/bit-op.4th::3]]
TODO need a way to xfer vectors tofrom banks, bank 0 is scalar [[file:./src/runner/thumb/vfp.4th::46]]
TODO need ffi-callback with number of returns [[file:./src/runner/tests/ffi/callbacks.4th::26]]
TODO needs seq size or terminator, also needs ,uint32 after op codes. [[file:./src/interp/decompiler.4th::88]]
TODO needs to be adapted for interp [[file:./src/cross/defining/frames-boot.4th::12]]
TODO needs to be adapted for interp [[file:./src/cross/defining/frames.4th::8]]
TODO needs to return to endtry [[file:./src/lib/catch-bash.4th::61]]
TODO needs to update w/ hard & soft; trampoline [[file:./src/runner/aliases.4th::14]]
TODO negate signed low word? result needs to be two cells. [[file:./src/runner/thumb/big-math.4th::29]]
TODO nested comments [[file:./src/interp/interp.4th::150]]
TODO null terminate in function? [[file:./src/interp/tests/int-to-string.4th::14]]
TODO optimize by counting down? divide & conquer? [[file:./src/runner/math.4th::24]]
TODO optimize by recursively apply exponent/2 [[file:./src/runner/math.4th::45]]
TODO optimize with its own series, or combine steppers [[file:./src/lib/math/float32.4th::344]]
TODO optimize? [[file:./src/lib/byte-data.4th::27]]
TODO out of bounds [[file:./src/tests/lib/structs/seq-field.4th::32]]
TODO partial and map [[file:./src/lib/asm/bit-op.4th::55]]
TODO pass eip as an argument to a top level eval. Likewise with the dictionaries and other state like registers. [[file:./src/runner/thumb/init.4th::50]]
TODO patch in lengths and offsets [[file:./src/tests/elf/bones/with-data.4th::337]]
TODO pick printer based on field type [[file:./src/lib/structs/writer.4th::49]]
TODO pop and push could be done in code word for each vector length [[file:./src/runner/thumb/vfp.4th::47]]
TODO power from 1? [[file:./src/lib/math/float32.4th::136]]
TODO print field name; assoc list? [[file:./src/interp/boot/debug/program-args.4th::28]]
TODO push the ABI's locals in cs-reg and dict-reg, but before the callback's args. [[file:./src/runner/thumb/ffi.4th::106]]
TODO quit that resets stack, dict, fp; or interp w/ debug prompt [[file:./src/lib/catch.4th::67]]
TODO raise an error [[file:./src/tests/lib/strings.4th::133]]
TODO raise an error [[file:./src/tests/lib/strings.4th::136]]
TODO raise an error [[file:./src/tests/lib/strings.4th::143]]
TODO raise an error [[file:./src/tests/lib/strings.4th::146]]
TODO raise an error [[file:./src/tests/lib/strings.4th::153]]
TODO raise an error [[file:./src/tests/lib/strings.4th::156]]
TODO raise an error [[file:./src/tests/lib/strings.4th::163]]
TODO raise an error [[file:./src/tests/lib/strings.4th::166]]
TODO raise an error [[file:./src/tests/lib/strings.4th::174]]
TODO raise an error [[file:./src/tests/lib/strings.4th::182]]
TODO raise an error [[file:./src/tests/lib/strings.4th::186]]
TODO raise an error [[file:./src/tests/lib/strings.4th::193]]
TODO raise an error [[file:./src/tests/lib/strings.4th::197]]
TODO raise an error [[file:./src/tests/lib/strings.4th::204]]
TODO raise an error [[file:./src/tests/lib/strings.4th::208]]
TODO raise an error [[file:./src/tests/lib/strings.4th::215]]
TODO raise an error [[file:./src/tests/lib/strings.4th::219]]
TODO raise an error [[file:./src/tests/lib/strings.4th::22]]
TODO raise an error [[file:./src/tests/lib/strings.4th::25]]
TODO raise an error [[file:./src/tests/lib/strings.4th::31]]
TODO raise an error [[file:./src/tests/lib/strings.4th::34]]
TODO raise an error [[file:./src/tests/lib/strings.4th::40]]
TODO raise an error [[file:./src/tests/lib/strings.4th::45]]
TODO raise an error [[file:./src/tests/lib/strings.4th::52]]
TODO raise an error [[file:./src/tests/lib/strings.4th::55]]
TODO raise errors from next-token; pop reader first [[file:./src/interp/interp.4th::95]]
TODO read return 0 on EOF, not -1; could use 0 for length on eof but need a flag for the first read. [[file:./src/interp/reader.4th::56]]
TODO reader stack: pop off when EOF reached [[file:./src/interp/reader.4th::57]]
TODO relative data stack? [[file:./src/interp/data-stack.4th::1]]
TODO reorder args to match actual asm [[file:./src/lib/asm/thumb/v2.4th::212]]
TODO reset stack & state [[file:./src/runner/thumb/ops.4th::203]]
TODO return is aliased to proper-exit; migrate frames to return0 [[file:./src/interp/boot/cross.4th::213]]
TODO return nothing [[file:./src/runner/tests/ffi/calls.4th::37]]
TODO return with output adjusted to first digit and a length [[file:./src/interp/output/dec.4th::6]]
TODO returns need to pop the catcher. Have try start a frame that returns here? Still needs to return from parent frame. Flag frame pointers as being nested? [[file:./src/lib/catch.4th::56]]
TODO save lr, mark data [[file:./src/runner/thumb/init.4th::2]]
TODO save state before calling? r4-7 saved by called per ABI. [[file:./src/runner/thumb/ffi.4th::3]]
TODO scr modes: rounding, vector, stride, traps; set on every op? [[file:./src/runner/thumb/vfp.4th::19]]
TODO set dict in colon def from const [[file:./src/runner/thumb/init.4th::51]]
TODO should be up-stack-bytes [[file:./src/lib/strings.4th::32]]
TODO should be up-stack-bytes [[file:./src/lib/strings.4th::57]]
TODO simplify compiling-read & merge with compiler.4th's [[file:./src/interp/interp.4th::96]]
TODO split like interp for android and linux [[file:./src/bin/runner.4th::1]]
TODO sqrt, exponent, fraction [[file:./src/runner/thumb/vfp.4th::48]]
TODO start with software division and detect Thumb2 from HWCAPS or /proc/cpuinfo, or trapping illegal instructions. going to need aklist ofkinit functions. [[file:./src/runner/thumb/math-init.4th::1]]
TODO store eip and sp for retry [[file:./src/lib/catch.4th::33]]
TODO store file name and count lines in readers [[file:./src/interp/interp.4th::82]]
TODO supply input and output fds [[file:./src/interp/interp.4th::49]]
TODO swap seq and list order? [[file:./src/lib/sort/merge-sort.4th::81]]
TODO switch to defs gets these included when cross compiling. [[file:./src/interp/list.4th::16]]
TODO symbols from dictionary [[file:./src/lib/elf/stub32-dynamic.4th::456]]
TODO take the fd, into a string [[file:./src/interp/output/float32.4th::3]]
TODO test abnormal exit, signals to child [[file:./src/tests/lib/linux/threads.4th::25]]
TODO test generated accessors [[file:./src/tests/lib/structs/dsl.4th::23]]
TODO test negative, huge, indexes? [[file:./src/interp/tests/strings.4th::17]]
TODO test negative, huge, indexes? [[file:./src/interp/tests/strings.4th::7]]
TODO thread cleanup that unmaps stack [[file:./src/lib/linux/threads.4th::5]]
TODO thread structure to hold stack ptr, size, pid, status flag [[file:./src/lib/linux/threads.4th::3]]
TODO thread-kill & thread-join: muscl uses TLS, wait4 doesn't consider the thread's pid a child. [[file:./src/lib/linux/threads.4th::6]]
TODO throw [[file:./src/lib/linux/threads.4th::59]] THEN
TODO throw error [[file:./src/lib/linux/threads.4th::68]]
TODO top level IF nesting, reuse bash version? [[file:./src/interp/interp.4th::236]]
TODO try other types of strings [[file:./src/tests/lib/strings.4th::69]]
TODO try/rescue/end-try where rescue provides the handler. [[file:./src/lib/catch.4th::7]]
TODO update callers that don't expect returns [[file:./src/interp/dictionary.4th::52]]
TODO update when mapping the stack? [[file:./src/cross/iwords.4th::24]]
TODO update when mapping the stack? [[file:./src/cross/iwords.4th::35]]
TODO use a list to store the reader stack. no need for readers to know. [[file:./src/interp/interp.4th::80]]
TODO use a reduce function [[file:./src/lib/elf/stub32-dynamic.4th::337]]
TODO use f* or v*.type mneumonics? [[file:./src/lib/asm/thumb/vfp.4th::195]]
TODO use fun-reduce [[file:./src/lib/math/float32.4th::118]]
TODO use map-seq [[file:./src/interp/boot/debug/fancy-stack.4th::35]]
TODO usings locals is a hack. should have begin-frame on the stack before compiling-read, but def vs colon. [[file:./src/cross/defining/frames-boot.4th::5]]
TODO vector operations: up to 4 floats. [[file:./src/runner/thumb/vfp.4th::45]]
TODO vectors from pointer [[file:./src/runner/thumb/vfp.4th::49]]
TODO verify [[file:./src/runner/thumb/vfp-constants.4th::10]]
TODO void returns? >=4 args, mixed with floats? [[file:./src/runner/tests/ffi/calls.4th::67]]
TODO whitespace? is missing a THEN and is getting an extra 0x40 [[file:./src/interp/boot/cross/iwords.4th::4]]
TODO write stub header, data, program & section headers, and then ELF header. [[file:./src/tests/elf/bones/with-data.4th::336]]
#+end_src
