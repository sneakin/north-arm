(defun north-arg-accessor (n &optional sets spacing)
  (let ((sets (or sets ""))
	(spacing (or spacing "")))
    (if (< n 4)
	(format "%sarg%i%s" sets n spacing)
      (format "%i %sargn%s" n sets spacing))))

(defun north-renumber-args (n &optional increase start end)
  (interactive
   (list (read-number "First argument number?" 0)
         (read-number "Increase by?" 1)
         (if (use-region-p) (region-beginning) (point))
         (if (use-region-p)
             (region-end)
           (save-excursion
             (forward-paragraph 1)
             (point)))))
  (if (use-region-p) (goto-char start))
  (message "Renumbering args from %i to +%i to point %i:%i." n increase start end)
  (while (re-search-forward "\\([0-9]+\\) +\\(set-\\)?argn\\( \\|$\\)" end t)
    (let* ((num (string-to-number (match-string 1)))
	   (new-num (if (< num n) num (+ num increase)))
	   (sets (match-string 2))
	   (spacing (match-string 3)))
      (replace-match (north-arg-accessor new-num sets spacing) nil t)))
  (goto-char start)
  (while (re-search-forward "\\(set-\\)?arg\\([0-9]+\\)\\( \\|$\\)" end t)
    (let* ((num (string-to-number (match-string 2)))
	   (new-num (if (< num n) num (+ num increase)))
	   (sets (match-string 1))
	   (spacing (match-string 3)))
      (replace-match (north-arg-accessor new-num sets spacing) nil t))))

(defun north-query-swap (from to &optional start end)
  (interactive
   (list (read-string "Swap: ")
         (read-string "With: ")
         (if (use-region-p) (region-beginning))
         (if (use-region-p) (region-end))))
  (perform-replace (format "\\(%s\\|%s\\)" (regexp-quote from) (regexp-quote to))
                   (list (lambda (a b)
                           (cond
                            ((string= to (match-string 0)) from)
                            ((string= from (match-string 0)) to)
                            (t (error (format "Unknown match: %s" (match-string 0)))))))
                   t t nil nil nil start end))
